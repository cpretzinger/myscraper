Main Page: https://docs.crewai.com/introduction

Introduction - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationGet StartedIntroductionGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryGet StartedIntroductionWelcome to CrewAI docs!‚ÄãWhat is CrewAI?
CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.
By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks.
CrewAI Mindmap
‚ÄãWhy CrewAI?

ü§º‚Äç‚ôÄÔ∏è Role-Playing Agents: Agents can take on different roles and personas to better understand and interact with complex systems.
ü§ñ Autonomous Decision Making: Agents can make decisions autonomously based on the given context and available tools.
ü§ù Seamless Collaboration: Agents can work together seamlessly, sharing information and resources to achieve common goals.
üß† Complex Task Tackling: CrewAI is designed to tackle complex tasks, such as multi-step workflows, decision making, and problem solving.

‚ÄãGet Started with CrewAI
QuickstartGetting started with CrewAIJoin the CommunityJoin the CrewAI community and get help with your project!
‚ÄãNext Step

Install CrewAI to get started with your first agent.
Was this page helpful?YesNoInstallationwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageWhat is CrewAI?Why CrewAI?Get Started with CrewAINext Step

Page: https://docs.crewai.com/

Introduction - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationGet StartedIntroductionGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryGet StartedIntroductionWelcome to CrewAI docs!‚ÄãWhat is CrewAI?
CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.
By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks.
CrewAI Mindmap
‚ÄãWhy CrewAI?

ü§º‚Äç‚ôÄÔ∏è Role-Playing Agents: Agents can take on different roles and personas to better understand and interact with complex systems.
ü§ñ Autonomous Decision Making: Agents can make decisions autonomously based on the given context and available tools.
ü§ù Seamless Collaboration: Agents can work together seamlessly, sharing information and resources to achieve common goals.
üß† Complex Task Tackling: CrewAI is designed to tackle complex tasks, such as multi-step workflows, decision making, and problem solving.

‚ÄãGet Started with CrewAI
QuickstartGetting started with CrewAIJoin the CommunityJoin the CrewAI community and get help with your project!
‚ÄãNext Step

Install CrewAI to get started with your first agent.
Was this page helpful?YesNoInstallationwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageWhat is CrewAI?Why CrewAI?Get Started with CrewAINext Step

Page: https://docs.crewai.com/introduction

Introduction - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationGet StartedIntroductionGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryGet StartedIntroductionWelcome to CrewAI docs!‚ÄãWhat is CrewAI?
CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.
By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks.
CrewAI Mindmap
‚ÄãWhy CrewAI?

ü§º‚Äç‚ôÄÔ∏è Role-Playing Agents: Agents can take on different roles and personas to better understand and interact with complex systems.
ü§ñ Autonomous Decision Making: Agents can make decisions autonomously based on the given context and available tools.
ü§ù Seamless Collaboration: Agents can work together seamlessly, sharing information and resources to achieve common goals.
üß† Complex Task Tackling: CrewAI is designed to tackle complex tasks, such as multi-step workflows, decision making, and problem solving.

‚ÄãGet Started with CrewAI
QuickstartGetting started with CrewAIJoin the CommunityJoin the CrewAI community and get help with your project!
‚ÄãNext Step

Install CrewAI to get started with your first agent.
Was this page helpful?YesNoInstallationwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageWhat is CrewAI?Why CrewAI?Get Started with CrewAINext Step

Page: https://docs.crewai.com/examples/example

CrewAI Examples - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationExamplesCrewAI ExamplesGet StartedExamplesCrewAI home pageCommunityChangelogExamplesCrewAI ExamplesExamplesCrewAI ExamplesA collection of examples that show how to use CrewAI framework to automate workflows.Marketing StrategyAutomate marketing strategy creation with CrewAI.Surprise TripCreate a surprise trip itinerary with CrewAI.Match Profile to PositionsMatch a profile to jobpositions with CrewAI.Create Job PostingCreate a job posting with CrewAI.Game GeneratorCreate a game with CrewAI.Find Job CandidatesFind job candidates with CrewAI.Was this page helpful?YesNowebsitexgithublinkedinyoutubePowered by Mintlify

Page: https://docs.crewai.com/

Introduction - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationGet StartedIntroductionGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryGet StartedIntroductionWelcome to CrewAI docs!‚ÄãWhat is CrewAI?
CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.
By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks.
CrewAI Mindmap
‚ÄãWhy CrewAI?

ü§º‚Äç‚ôÄÔ∏è Role-Playing Agents: Agents can take on different roles and personas to better understand and interact with complex systems.
ü§ñ Autonomous Decision Making: Agents can make decisions autonomously based on the given context and available tools.
ü§ù Seamless Collaboration: Agents can work together seamlessly, sharing information and resources to achieve common goals.
üß† Complex Task Tackling: CrewAI is designed to tackle complex tasks, such as multi-step workflows, decision making, and problem solving.

‚ÄãGet Started with CrewAI
QuickstartGetting started with CrewAIJoin the CommunityJoin the CrewAI community and get help with your project!
‚ÄãNext Step

Install CrewAI to get started with your first agent.
Was this page helpful?YesNoInstallationwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageWhat is CrewAI?Why CrewAI?Get Started with CrewAINext Step

Page: https://docs.crewai.com/introduction

Introduction - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationGet StartedIntroductionGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryGet StartedIntroductionWelcome to CrewAI docs!‚ÄãWhat is CrewAI?
CrewAI is a cutting-edge Python framework for orchestrating role-playing, autonomous AI agents.
By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks.
CrewAI Mindmap
‚ÄãWhy CrewAI?

ü§º‚Äç‚ôÄÔ∏è Role-Playing Agents: Agents can take on different roles and personas to better understand and interact with complex systems.
ü§ñ Autonomous Decision Making: Agents can make decisions autonomously based on the given context and available tools.
ü§ù Seamless Collaboration: Agents can work together seamlessly, sharing information and resources to achieve common goals.
üß† Complex Task Tackling: CrewAI is designed to tackle complex tasks, such as multi-step workflows, decision making, and problem solving.

‚ÄãGet Started with CrewAI
QuickstartGetting started with CrewAIJoin the CommunityJoin the CrewAI community and get help with your project!
‚ÄãNext Step

Install CrewAI to get started with your first agent.
Was this page helpful?YesNoInstallationwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageWhat is CrewAI?Why CrewAI?Get Started with CrewAINext Step

Page: https://docs.crewai.com/installation

Installation - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationGet StartedInstallationGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryGet StartedInstallationThis guide will walk you through the installation process for CrewAI and its dependencies.
CrewAI is a flexible and powerful AI framework that enables you to create and manage AI agents, tools, and tasks efficiently.
Let‚Äôs get started! üöÄ
Make sure you have Python >=3.10 <=3.13 installed on your system before you proceed.
1Install CrewAIInstall the main CrewAI package with the following command:You can also install the main CrewAI package and the tools package that include a series of helpful tools for your agents:Alternatively, you can also use:2Upgrade CrewAITo upgrade CrewAI and CrewAI Tools to the latest version, run the following command

If you‚Äôre using an older version of CrewAI, you may receive a warning about using Poetry for dependency management.



In this case, you‚Äôll need to run the command below to update your project.
This command will migrate your project to use UV and update the necessary files.
Terminalcrewai update



After running the command above, you should see the following output:



You‚Äôre all set! You can now proceed to the next step! üéâ

3Verify the installationTo verify that crewai and crewai-tools are installed correctly, run the following commandYou should see the version number of crewai and crewai-tools.If you see the version number, then the installation was successful! üéâ
‚ÄãCreate a new CrewAI project
The next step is to create a new CrewAI project.
We recommend using the YAML Template scaffolding to get started as it provides a structured approach to defining agents and tasks.
1Create a new CrewAI project using the YAML Template ConfigurationTo create a new CrewAI project, run the following CLI (Command Line Interface) command:This command creates a new project folder with the following structure:File/DirectoryDescriptionmy_project/Root directory of the project‚îú‚îÄ‚îÄ .gitignoreSpecifies files and directories to ignore in Git‚îú‚îÄ‚îÄ pyproject.tomlProject configuration and dependencies‚îú‚îÄ‚îÄ README.mdProject documentation‚îú‚îÄ‚îÄ .envEnvironment variables‚îî‚îÄ‚îÄ src/Source code directory¬†¬†¬†¬†‚îî‚îÄ‚îÄ my_project/Main application package¬†¬†¬†¬†¬†¬†¬†¬†‚îú‚îÄ‚îÄ __init__.pyMarks the directory as a Python package¬†¬†¬†¬†¬†¬†¬†¬†‚îú‚îÄ‚îÄ main.pyMain application script¬†¬†¬†¬†¬†¬†¬†¬†‚îú‚îÄ‚îÄ crew.pyCrew-related functionalities¬†¬†¬†¬†¬†¬†¬†¬†‚îú‚îÄ‚îÄ tools/Custom tools directory¬†¬†¬†¬†¬†¬†¬†¬†‚îÇ   ‚îú‚îÄ‚îÄ custom_tool.pyCustom tool implementation¬†¬†¬†¬†¬†¬†¬†¬†‚îÇ   ‚îî‚îÄ‚îÄ __init__.pyMarks tools directory as a package¬†¬†¬†¬†¬†¬†¬†¬†‚îî‚îÄ‚îÄ config/Configuration files directory¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†‚îú‚îÄ‚îÄ agents.yamlAgent configurations¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†‚îî‚îÄ‚îÄ tasks.yamlTask configurationsYou can now start developing your crew by editing the files in the src/my_project folder.
The main.py file is the entry point of the project, the crew.py file is where you define your crew, the agents.yaml file is where you define your agents,
and the tasks.yaml file is where you define your tasks.2Customize your projectTo customize your project, you can:
Modify src/my_project/config/agents.yaml to define your agents.
Modify src/my_project/config/tasks.yaml to define your tasks.
Modify src/my_project/crew.py to add your own logic, tools, and specific arguments.
Modify src/my_project/main.py to add custom inputs for your agents and tasks.
Add your environment variables into the .env file.

‚ÄãNext steps
Now that you have installed crewai and crewai-tools, you‚Äôre ready to spin up your first crew!

üë®‚Äçüíª Build your first agent with CrewAI by following the Quickstart guide.
üí¨ Join the Community to get help and share your feedback.
Was this page helpful?YesNoIntroductionQuickstartwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageCreate a new CrewAI projectNext steps

Page: https://docs.crewai.com/quickstart

Quickstart - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationGet StartedQuickstartGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryGet StartedQuickstartBuild your first AI agent with CrewAI in under 5 minutes.‚ÄãBuild your first CrewAI Agent
Let‚Äôs create a simple crew that will help us research and report on the latest AI developments for a given topic or subject.
Before we proceed, make sure you have crewai and crewai-tools installed.
If you haven‚Äôt installed them yet, you can do so by following the installation guide.
Follow the steps below to get crewing! üö£‚Äç‚ôÇÔ∏è
1Create your crewCreate a new crew project by running the following command in your terminal.
This will create a new directory called latest-ai-development with the basic structure for your crew.2Modify your `agents.yaml` fileYou can also modify the agents as needed to fit your use case or copy and paste as is to your project.
Any variable interpolated in your agents.yaml and tasks.yaml files like {topic} will be replaced by the value of the variable in the main.py file.agents.yaml# src/latest_ai_development/config/agents.yaml
researcher:
  role: >
    {topic} Senior Data Researcher
  goal: >
    Uncover cutting-edge developments in {topic}
  backstory: >
    You're a seasoned researcher with a knack for uncovering the latest
    developments in {topic}. Known for your ability to find the most relevant
    information and present it in a clear and concise manner.
      
reporting_analyst:
  role: >
    {topic} Reporting Analyst
  goal: >
    Create detailed reports based on {topic} data analysis and research findings
  backstory: >
    You're a meticulous analyst with a keen eye for detail. You're known for
    your ability to turn complex data into clear and concise reports, making
    it easy for others to understand and act on the information you provide.
3Modify your `tasks.yaml` filetasks.yaml# src/latest_ai_development/config/tasks.yaml
research_task:
  description: >
    Conduct a thorough research about {topic}
    Make sure you find any interesting and relevant information given
    the current year is 2024.
  expected_output: >
    A list with 10 bullet points of the most relevant information about {topic}
  agent: researcher

reporting_task:
  description: >
    Review the context you got and expand each topic into a full section for a report.
    Make sure the report is detailed and contains any and all relevant information.
  expected_output: >
    A fully fledge reports with the mains topics, each with a full section of information.
    Formatted as markdown without '```'
  agent: reporting_analyst
  output_file: report.md
4Modify your `crew.py` filecrew.py# src/latest_ai_development/crew.py
from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task
from crewai_tools import SerperDevTool

@CrewBase
class LatestAiDevelopmentCrew():
  """LatestAiDevelopment crew"""

  @agent
  def researcher(self) -> Agent:
    return Agent(
      config=self.agents_config['researcher'],
      verbose=True,
      tools=[SerperDevTool()]
    )

  @agent
  def reporting_analyst(self) -> Agent:
    return Agent(
      config=self.agents_config['reporting_analyst'],
      verbose=True
    )

  @task
  def research_task(self) -> Task:
    return Task(
      config=self.tasks_config['research_task'],
    )

  @task
  def reporting_task(self) -> Task:
    return Task(
      config=self.tasks_config['reporting_task'],
      output_file='output/report.md' # This is the file that will be contain the final report.
    )

  @crew
  def crew(self) -> Crew:
    """Creates the LatestAiDevelopment crew"""
    return Crew(
      agents=self.agents, # Automatically created by the @agent decorator
      tasks=self.tasks, # Automatically created by the @task decorator
      process=Process.sequential,
      verbose=True,
    ) 
5Feel free to pass custom inputs to your crewFor example, you can pass the topic input to your crew to customize the research and reporting.main.py#!/usr/bin/env python
# src/latest_ai_development/main.py
import sys
from latest_ai_development.crew import LatestAiDevelopmentCrew

def run():
  """
  Run the crew.
  """
  inputs = {
    'topic': 'AI Agents'
  }
  LatestAiDevelopmentCrew().crew().kickoff(inputs=inputs)
6Set your environment variablesBefore running your crew, make sure you have the following keys set as environment variables in your .env file:
An OpenAI API key (or other LLM API key): OPENAI_API_KEY=sk-...
A Serper.dev API key: SERPER_API_KEY=YOUR_KEY_HERE
7Lock and install the dependenciesLock the dependencies and install them by using the CLI command but first, navigate to your project directory:8Run your crewTo run your crew, execute the following command in the root of your project:9View your final reportYou should see the output in the console and the report.md file should be created in the root of your project with the final report.Here‚Äôs an example of what the report should look like:
‚ÄãNote on Consistency in Naming
The names you use in your YAML files (agents.yaml and tasks.yaml) should match the method names in your Python code.
For example, you can reference the agent for specific tasks from tasks.yaml file.
This naming consistency allows CrewAI to automatically link your configurations with your code; otherwise, your task won‚Äôt recognize the reference properly.
‚ÄãExample References
Note how we use the same name for the agent in the agents.yaml (email_summarizer) file as the method name in the crew.py (email_summarizer) file.
agents.yamlemail_summarizer:
    role: >
      Email Summarizer
    goal: >
      Summarize emails into a concise and clear summary
    backstory: >
      You will create a 5 bullet point summary of the report
    llm: mixtal_llm

Note how we use the same name for the agent in the tasks.yaml (email_summarizer_task) file as the method name in the crew.py (email_summarizer_task) file.
tasks.yamlemail_summarizer_task:
    description: >
      Summarize the email into a 5 bullet point summary
    expected_output: >
      A 5 bullet point summary of the email
    agent: email_summarizer
    context:
      - reporting_task
      - research_task

Use the annotations to properly reference the agent and task in the crew.py file.
‚ÄãAnnotations include:

@agent
@task
@crew
@tool
@callback
@output_json
@output_pydantic
@cache_handler

crew.py# ...
@agent
def email_summarizer(self) -> Agent:
    return Agent(
        config=self.agents_config["email_summarizer"],
    )

@task
def email_summarizer_task(self) -> Task:
    return Task(
        config=self.tasks_config["email_summarizer_task"],
    )
# ...

In addition to the sequential process, you can use the hierarchical process,
which automatically assigns a manager to the defined crew to properly coordinate the planning and execution of tasks through delegation and validation of results.
You can learn more about the core concepts here.
‚ÄãReplay Tasks from Latest Crew Kickoff
CrewAI now includes a replay feature that allows you to list the tasks from the last run and replay from a specific one. To use this feature, run.
crewai replay <task_id>

Replace <task_id> with the ID of the task you want to replay.
‚ÄãReset Crew Memory
If you need to reset the memory of your crew before running it again, you can do so by calling the reset memory feature:
crewai reset-memory

This will clear the crew‚Äôs memory, allowing for a fresh start.
‚ÄãDeploying Your Project
The easiest way to deploy your crew is through CrewAI Enterprise, where you can deploy your crew in a few clicks.Was this page helpful?YesNoInstallationAgentswebsitexgithublinkedinyoutubePowered by MintlifyOn this pageBuild your first CrewAI AgentNote on Consistency in NamingExample ReferencesAnnotations include:Replay Tasks from Latest Crew KickoffReset Crew MemoryDeploying Your Project

Page: https://docs.crewai.com/concepts/agents

Agents - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationCore ConceptsAgentsGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryCore ConceptsAgentsWhat are CrewAI Agents and how to use them.‚ÄãWhat is an agent?
An agent is an autonomous unit programmed to:
Perform tasksMake decisionsCommunicate with other agents
Think of an agent as a member of a team, with specific skills and a particular job to do. Agents can have different roles like Researcher, Writer, or Customer Support, each contributing to the overall goal of the crew.
‚ÄãAgent attributes
AttributeParameterDescriptionRoleroleDefines the agent‚Äôs function within the crew. It determines the kind of tasks the agent is best suited for.GoalgoalThe individual objective that the agent aims to achieve. It guides the agent‚Äôs decision-making process.BackstorybackstoryProvides context to the agent‚Äôs role and goal, enriching the interaction and collaboration dynamics.LLM (optional)llmRepresents the language model that will run the agent. It dynamically fetches the model name from the OPENAI_MODEL_NAME environment variable, defaulting to ‚Äúgpt-4‚Äù if not specified.Tools (optional)toolsSet of capabilities or functions that the agent can use to perform tasks. Expected to be instances of custom classes compatible with the agent‚Äôs execution environment. Tools are initialized with a default value of an empty list.Function Calling LLM (optional)function_calling_llmSpecifies the language model that will handle the tool calling for this agent, overriding the crew function calling LLM if passed. Default is None.Max Iter (optional)max_iterMax Iter is the maximum number of iterations the agent can perform before being forced to give its best answer. Default is 25.Max RPM (optional)max_rpmMax RPM is the maximum number of requests per minute the agent can perform to avoid rate limits. It‚Äôs optional and can be left unspecified, with a default value of None.Max Execution Time (optional)max_execution_timeMax Execution Time is the maximum execution time for an agent to execute a task. It‚Äôs optional and can be left unspecified, with a default value of None, meaning no max execution time.Verbose (optional)verboseSetting this to True configures the internal logger to provide detailed execution logs, aiding in debugging and monitoring. Default is False.Allow Delegation (optional)allow_delegationAgents can delegate tasks or questions to one another, ensuring that each task is handled by the most suitable agent. Default is False.Step Callback (optional)step_callbackA function that is called after each step of the agent. This can be used to log the agent‚Äôs actions or to perform other operations. It will overwrite the crew step_callback.Cache (optional)cacheIndicates if the agent should use a cache for tool usage. Default is True.System Template (optional)system_templateSpecifies the system format for the agent. Default is None.Prompt Template (optional)prompt_templateSpecifies the prompt format for the agent. Default is None.Response Template (optional)response_templateSpecifies the response format for the agent. Default is None.Allow Code Execution (optional)allow_code_executionEnable code execution for the agent. Default is False.Max Retry Limit (optional)max_retry_limitMaximum number of retries for an agent to execute a task when an error occurs. Default is 2.Use System Prompt (optional)use_system_promptAdds the ability to not use system prompt (to support o1 models). Default is True.Respect Context Window (optional)respect_context_windowSummary strategy to avoid overflowing the context window. Default is True.
‚ÄãCreating an agent
Agent interaction: Agents can interact with each other using CrewAI‚Äôs built-in delegation and communication mechanisms. This allows for dynamic task management and problem-solving within the crew.
To create an agent, you would typically initialize an instance of the Agent class with the desired properties. Here‚Äôs a conceptual example including all attributes:
Code examplefrom crewai import Agent

agent = Agent(
  role='Data Analyst',
  goal='Extract actionable insights',
  backstory="""You're a data analyst at a large company.
    You're responsible for analyzing data and providing insights
    to the business.
    You're currently working on a project to analyze the
    performance of our marketing campaigns.""",
  tools=[my_tool1, my_tool2],  # Optional, defaults to an empty list
  llm=my_llm,  # Optional
  function_calling_llm=my_llm,  # Optional
  max_iter=15,  # Optional
  max_rpm=None, # Optional
  max_execution_time=None, # Optional
  verbose=True,  # Optional
  allow_delegation=False,  # Optional
  step_callback=my_intermediate_step_callback,  # Optional
  cache=True,  # Optional
  system_template=my_system_template,  # Optional
  prompt_template=my_prompt_template,  # Optional
  response_template=my_response_template,  # Optional
  config=my_config,  # Optional
  crew=my_crew,  # Optional
  tools_handler=my_tools_handler,  # Optional
  cache_handler=my_cache_handler,  # Optional
  callbacks=[callback1, callback2],  # Optional
  allow_code_execution=True,  # Optional
  max_retry_limit=2,  # Optional
  use_system_prompt=True,  # Optional
  respect_context_window=True,  # Optional
)

‚ÄãSetting prompt templates
Prompt templates are used to format the prompt for the agent. You can use to update the system, regular and response templates for the agent. Here‚Äôs an example of how to set prompt templates:
Code exampleagent = Agent(
        role="{topic} specialist",
        goal="Figure {goal} out",
        backstory="I am the master of {role}",
        system_template="""<|start_header_id|>system<|end_header_id|>
                        {{ .System }}<|eot_id|>""",
        prompt_template="""<|start_header_id|>user<|end_header_id|>
                        {{ .Prompt }}<|eot_id|>""",
        response_template="""<|start_header_id|>assistant<|end_header_id|>
                        {{ .Response }}<|eot_id|>""",
)

‚ÄãBring your third-party agents
Extend your third-party agents like LlamaIndex, Langchain, Autogen or fully custom agents using the the CrewAI‚Äôs BaseAgent class.
BaseAgent includes attributes and methods required to integrate with your crews to run and delegate tasks to other agents within your own crew.
CrewAI is a universal multi-agent framework that allows for all agents to work together to automate tasks and solve problems.
Code examplefrom crewai import Agent, Task, Crew
from custom_agent import CustomAgent # You need to build and extend your own agent logic with the CrewAI BaseAgent class then import it here.

from langchain.agents import load_tools

langchain_tools = load_tools(["google-serper"], llm=llm)

agent1 = CustomAgent(
    role="agent role",
    goal="who is {input}?",
    backstory="agent backstory",
    verbose=True,
)

task1 = Task(
    expected_output="a short biography of {input}",
    description="a short biography of {input}",
    agent=agent1,
)

agent2 = Agent(
    role="agent role",
    goal="summarize the short bio for {input} and if needed do more research",
    backstory="agent backstory",
    verbose=True,
)

task2 = Task(
    description="a tldr summary of the short biography",
    expected_output="5 bullet point summary of the biography",
    agent=agent2,
    context=[task1],
)

my_crew = Crew(agents=[agent1, agent2], tasks=[task1, task2])
crew = my_crew.kickoff(inputs={"input": "Mark Twain"})

‚ÄãConclusion
Agents are the building blocks of the CrewAI framework. By understanding how to define and interact with agents,
you can create sophisticated AI systems that leverage the power of collaborative intelligence.Was this page helpful?YesNoQuickstartTaskswebsitexgithublinkedinyoutubePowered by MintlifyOn this pageWhat is an agent?Agent attributesCreating an agentSetting prompt templatesBring your third-party agentsConclusion

Page: https://docs.crewai.com/concepts/tasks

Tasks - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationCore ConceptsTasksGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryCore ConceptsTasksDetailed guide on managing and creating tasks within the CrewAI framework, reflecting the latest codebase updates.‚ÄãOverview of a Task
In the CrewAI framework, a Task is a specific assignment completed by an Agent.
They provide all necessary details for execution, such as a description, the agent responsible, required tools, and more, facilitating a wide range of action complexities.
Tasks within CrewAI can be collaborative, requiring multiple agents to work together. This is managed through the task properties and orchestrated by the Crew‚Äôs process, enhancing teamwork and efficiency.
‚ÄãTask Attributes
AttributeParametersTypeDescriptionDescriptiondescriptionstrA clear, concise statement of what the task entails.AgentagentOptional[BaseAgent]The agent responsible for the task, assigned either directly or by the crew‚Äôs process.Expected Outputexpected_outputstrA detailed description of what the task‚Äôs completion looks like.Tools (optional)toolsOptional[List[Any]]The functions or capabilities the agent can utilize to perform the task. Defaults to an empty list.Async Execution (optional)async_executionOptional[bool]If set, the task executes asynchronously, allowing progression without waiting for completion. Defaults to False.Context (optional)contextOptional[List["Task"]]Specifies tasks whose outputs are used as context for this task.Config (optional)configOptional[Dict[str, Any]]Additional configuration details for the agent executing the task, allowing further customization. Defaults to None.Output JSON (optional)output_jsonOptional[Type[BaseModel]]Outputs a JSON object, requiring an OpenAI client. Only one output format can be set.Output Pydantic (optional)output_pydanticOptional[Type[BaseModel]]Outputs a Pydantic model object, requiring an OpenAI client. Only one output format can be set.Output File (optional)output_fileOptional[str]Saves the task output to a file. If used with Output JSON or Output Pydantic, specifies how the output is saved.Output (optional)outputOptional[TaskOutput]An instance of TaskOutput, containing the raw, JSON, and Pydantic output plus additional details.Callback (optional)callbackOptional[Any]A callable that is executed with the task‚Äôs output upon completion.Human Input (optional)human_inputOptional[bool]Indicates if the task should involve human review at the end, useful for tasks needing human oversight. Defaults to False.Converter Class (optional)converter_clsOptional[Type[Converter]]A converter class used to export structured output. Defaults to None.
‚ÄãCreating a Task
Creating a task involves defining its scope, responsible agent, and any additional attributes for flexibility:
Codefrom crewai import Task

task = Task(
    description='Find and summarize the latest and most relevant news on AI',
    agent=sales_agent,
    expected_output='A bullet list summary of the top 5 most important AI news',
)

Directly specify an agent for assignment or let the hierarchical CrewAI‚Äôs process decide based on roles, availability, etc.
‚ÄãTask Output
The output of a task in CrewAI framework is encapsulated within the TaskOutput class. This class provides a structured way to access results of a task, including various formats such as raw output, JSON, and Pydantic models.
By default, the TaskOutput will only include the raw output. A TaskOutput will only include the pydantic or json_dict output if the original Task object was configured with output_pydantic or output_json, respectively.
‚ÄãTask Output Attributes
AttributeParametersTypeDescriptionDescriptiondescriptionstrDescription of the task.SummarysummaryOptional[str]Summary of the task, auto-generated from the first 10 words of the description.RawrawstrThe raw output of the task. This is the default format for the output.PydanticpydanticOptional[BaseModel]A Pydantic model object representing the structured output of the task.JSON Dictjson_dictOptional[Dict[str, Any]]A dictionary representing the JSON output of the task.AgentagentstrThe agent that executed the task.Output Formatoutput_formatOutputFormatThe format of the task output, with options including RAW, JSON, and Pydantic. The default is RAW.
‚ÄãTask Methods and Properties
Method/PropertyDescriptionjsonReturns the JSON string representation of the task output if the output format is JSON.to_dictConverts the JSON and Pydantic outputs to a dictionary.strReturns the string representation of the task output, prioritizing Pydantic, then JSON, then raw.
‚ÄãAccessing Task Outputs
Once a task has been executed, its output can be accessed through the output attribute of the Task object. The TaskOutput class provides various ways to interact with and present this output.
‚ÄãExample
Code# Example task
task = Task(
    description='Find and summarize the latest AI news',
    expected_output='A bullet list summary of the top 5 most important AI news',
    agent=research_agent,
    tools=[search_tool]
)

# Execute the crew
crew = Crew(
    agents=[research_agent],
    tasks=[task],
    verbose=True
)

result = crew.kickoff()

# Accessing the task output
task_output = task.output

print(f"Task Description: {task_output.description}")
print(f"Task Summary: {task_output.summary}")
print(f"Raw Output: {task_output.raw}")
if task_output.json_dict:
    print(f"JSON Output: {json.dumps(task_output.json_dict, indent=2)}")
if task_output.pydantic:
    print(f"Pydantic Output: {task_output.pydantic}")

‚ÄãIntegrating Tools with Tasks
Leverage tools from the CrewAI Toolkit and LangChain Tools for enhanced task performance and agent interaction.
‚ÄãCreating a Task with Tools
Codeimport os
os.environ["OPENAI_API_KEY"] = "Your Key"
os.environ["SERPER_API_KEY"] = "Your Key" # serper.dev API key

from crewai import Agent, Task, Crew
from crewai_tools import SerperDevTool

research_agent = Agent(
  role='Researcher',
  goal='Find and summarize the latest AI news',
  backstory="""You're a researcher at a large company.
  You're responsible for analyzing data and providing insights
  to the business.""",
  verbose=True
)

# to perform a semantic search for a specified query from a text's content across the internet
search_tool = SerperDevTool()

task = Task(
  description='Find and summarize the latest AI news',
  expected_output='A bullet list summary of the top 5 most important AI news',
  agent=research_agent,
  tools=[search_tool]
)

crew = Crew(
    agents=[research_agent],
    tasks=[task],
    verbose=True
)

result = crew.kickoff()
print(result)

This demonstrates how tasks with specific tools can override an agent‚Äôs default set for tailored task execution.
‚ÄãReferring to Other Tasks
In CrewAI, the output of one task is automatically relayed into the next one, but you can specifically define what tasks‚Äô output, including multiple, should be used as context for another task.
This is useful when you have a task that depends on the output of another task that is not performed immediately after it. This is done through the context attribute of the task:
Code# ...

research_ai_task = Task(
    description='Find and summarize the latest AI news',
    expected_output='A bullet list summary of the top 5 most important AI news',
    async_execution=True,
    agent=research_agent,
    tools=[search_tool]
)

research_ops_task = Task(
    description='Find and summarize the latest AI Ops news',
    expected_output='A bullet list summary of the top 5 most important AI Ops news',
    async_execution=True,
    agent=research_agent,
    tools=[search_tool]
)

write_blog_task = Task(
    description="Write a full blog post about the importance of AI and its latest news",
    expected_output='Full blog post that is 4 paragraphs long',
    agent=writer_agent,
    context=[research_ai_task, research_ops_task]
)

#...

‚ÄãAsynchronous Execution
You can define a task to be executed asynchronously. This means that the crew will not wait for it to be completed to continue with the next task. This is useful for tasks that take a long time to be completed, or that are not crucial for the next tasks to be performed.
You can then use the context attribute to define in a future task that it should wait for the output of the asynchronous task to be completed.
Code#...

list_ideas = Task(
    description="List of 5 interesting ideas to explore for an article about AI.",
    expected_output="Bullet point list of 5 ideas for an article.",
    agent=researcher,
    async_execution=True # Will be executed asynchronously
)

list_important_history = Task(
    description="Research the history of AI and give me the 5 most important events.",
    expected_output="Bullet point list of 5 important events.",
    agent=researcher,
    async_execution=True # Will be executed asynchronously
)

write_article = Task(
    description="Write an article about AI, its history, and interesting ideas.",
    expected_output="A 4 paragraph article about AI.",
    agent=writer,
    context=[list_ideas, list_important_history] # Will wait for the output of the two tasks to be completed
)

#...

‚ÄãCallback Mechanism
The callback function is executed after the task is completed, allowing for actions or notifications to be triggered based on the task‚Äôs outcome.
Code# ...

def callback_function(output: TaskOutput):
    # Do something after the task is completed
    # Example: Send an email to the manager
    print(f"""
        Task completed!
        Task: {output.description}
        Output: {output.raw}
    """)

research_task = Task(
    description='Find and summarize the latest AI news',
    expected_output='A bullet list summary of the top 5 most important AI news',
    agent=research_agent,
    tools=[search_tool],
    callback=callback_function
)

#...

‚ÄãAccessing a Specific Task Output
Once a crew finishes running, you can access the output of a specific task by using the output attribute of the task object:
Code# ...
task1 = Task(
    description='Find and summarize the latest AI news',
    expected_output='A bullet list summary of the top 5 most important AI news',
    agent=research_agent,
    tools=[search_tool]
)

#...

crew = Crew(
    agents=[research_agent],
    tasks=[task1, task2, task3],
    verbose=True
)

result = crew.kickoff()

# Returns a TaskOutput object with the description and results of the task
print(f"""
    Task completed!
    Task: {task1.output.description}
    Output: {task1.output.raw}
""")

‚ÄãTool Override Mechanism
Specifying tools in a task allows for dynamic adaptation of agent capabilities, emphasizing CrewAI‚Äôs flexibility.
‚ÄãError Handling and Validation Mechanisms
While creating and executing tasks, certain validation mechanisms are in place to ensure the robustness and reliability of task attributes. These include but are not limited to:

Ensuring only one output type is set per task to maintain clear output expectations.
Preventing the manual assignment of the id attribute to uphold the integrity of the unique identifier system.

These validations help in maintaining the consistency and reliability of task executions within the crewAI framework.
‚ÄãCreating Directories when Saving Files
You can now specify if a task should create directories when saving its output to a file. This is particularly useful for organizing outputs and ensuring that file paths are correctly structured.
Code# ...

save_output_task = Task(
    description='Save the summarized AI news to a file',
    expected_output='File saved successfully',
    agent=research_agent,
    tools=[file_save_tool],
    output_file='outputs/ai_news_summary.txt',
    create_directory=True
)

#...

‚ÄãConclusion
Tasks are the driving force behind the actions of agents in CrewAI.
By properly defining tasks and their outcomes, you set the stage for your AI agents to work effectively, either independently or as a collaborative unit.
Equipping tasks with appropriate tools, understanding the execution process, and following robust validation practices are crucial for maximizing CrewAI‚Äôs potential,
ensuring agents are effectively prepared for their assignments and that tasks are executed as intended.Was this page helpful?YesNoAgentsCrewswebsitexgithublinkedinyoutubePowered by MintlifyOn this pageOverview of a TaskTask AttributesCreating a TaskTask OutputTask Output AttributesTask Methods and PropertiesAccessing Task OutputsExampleIntegrating Tools with TasksCreating a Task with ToolsReferring to Other TasksAsynchronous ExecutionCallback MechanismAccessing a Specific Task OutputTool Override MechanismError Handling and Validation MechanismsCreating Directories when Saving FilesConclusion

Page: https://docs.crewai.com/concepts/crews

Crews - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationCore ConceptsCrewsGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryCore ConceptsCrewsUnderstanding and utilizing crews in the crewAI framework with comprehensive attributes and functionalities.‚ÄãWhat is a Crew?
A crew in crewAI represents a collaborative group of agents working together to achieve a set of tasks. Each crew defines the strategy for task execution, agent collaboration, and the overall workflow.
‚ÄãCrew Attributes
AttributeParametersDescriptionTaskstasksA list of tasks assigned to the crew.AgentsagentsA list of agents that are part of the crew.Process (optional)processThe process flow (e.g., sequential, hierarchical) the crew follows. Default is sequential.Verbose (optional)verboseThe verbosity level for logging during execution. Defaults to False.Manager LLM (optional)manager_llmThe language model used by the manager agent in a hierarchical process. Required when using a hierarchical process.Function Calling LLM (optional)function_calling_llmIf passed, the crew will use this LLM to do function calling for tools for all agents in the crew. Each agent can have its own LLM, which overrides the crew‚Äôs LLM for function calling.Config (optional)configOptional configuration settings for the crew, in Json or Dict[str, Any] format.Max RPM (optional)max_rpmMaximum requests per minute the crew adheres to during execution. Defaults to None.Language (optional)languageLanguage used for the crew, defaults to English.Language File (optional)language_filePath to the language file to be used for the crew.Memory (optional)memoryUtilized for storing execution memories (short-term, long-term, entity memory). Defaults to False.Cache (optional)cacheSpecifies whether to use a cache for storing the results of tools‚Äô execution. Defaults to True.Embedder (optional)embedderConfiguration for the embedder to be used by the crew. Mostly used by memory for now. Default is {"provider": "openai"}.Full Output (optional)full_outputWhether the crew should return the full output with all tasks outputs or just the final output. Defaults to False.Step Callback (optional)step_callbackA function that is called after each step of every agent. This can be used to log the agent‚Äôs actions or to perform other operations; it won‚Äôt override the agent-specific step_callback.Task Callback (optional)task_callbackA function that is called after the completion of each task. Useful for monitoring or additional operations post-task execution.Share Crew (optional)share_crewWhether you want to share the complete crew information and execution with the crewAI team to make the library better, and allow us to train models.Output Log File (optional)output_log_fileWhether you want to have a file with the complete crew output and execution. You can set it using True and it will default to the folder you are currently in and it will be called logs.txt or passing a string with the full path and name of the file.Manager Agent (optional)manager_agentmanager sets a custom agent that will be used as a manager.Manager Callbacks (optional)manager_callbacksmanager_callbacks takes a list of callback handlers to be executed by the manager agent when a hierarchical process is used.Prompt File (optional)prompt_filePath to the prompt JSON file to be used for the crew.Planning (optional)planningAdds planning ability to the Crew. When activated before each Crew iteration, all Crew data is sent to an AgentPlanner that will plan the tasks and this plan will be added to each task description.Planning LLM (optional)planning_llmThe language model used by the AgentPlanner in a planning process.
Crew Max RPM: The max_rpm attribute sets the maximum number of requests per minute the crew can perform to avoid rate limits and will override individual agents‚Äô max_rpm settings if you set it.
‚ÄãCrew Output
The output of a crew in the CrewAI framework is encapsulated within the CrewOutput class.
This class provides a structured way to access results of the crew‚Äôs execution, including various formats such as raw strings, JSON, and Pydantic models.
The CrewOutput includes the results from the final task output, token usage, and individual task outputs.
‚ÄãCrew Output Attributes
AttributeParametersTypeDescriptionRawrawstrThe raw output of the crew. This is the default format for the output.PydanticpydanticOptional[BaseModel]A Pydantic model object representing the structured output of the crew.JSON Dictjson_dictOptional[Dict[str, Any]]A dictionary representing the JSON output of the crew.Tasks Outputtasks_outputList[TaskOutput]A list of TaskOutput objects, each representing the output of a task in the crew.Token Usagetoken_usageDict[str, Any]A summary of token usage, providing insights into the language model‚Äôs performance during execution.
‚ÄãCrew Output Methods and Properties
Method/PropertyDescriptionjsonReturns the JSON string representation of the crew output if the output format is JSON.to_dictConverts the JSON and Pydantic outputs to a dictionary.**str**Returns the string representation of the crew output, prioritizing Pydantic, then JSON, then raw.
‚ÄãAccessing Crew Outputs
Once a crew has been executed, its output can be accessed through the output attribute of the Crew object. The CrewOutput class provides various ways to interact with and present this output.
‚ÄãExample
Code# Example crew execution
crew = Crew(
    agents=[research_agent, writer_agent],
    tasks=[research_task, write_article_task],
    verbose=True
)

crew_output = crew.kickoff()

# Accessing the crew output
print(f"Raw Output: {crew_output.raw}")
if crew_output.json_dict:
    print(f"JSON Output: {json.dumps(crew_output.json_dict, indent=2)}")
if crew_output.pydantic:
    print(f"Pydantic Output: {crew_output.pydantic}")
print(f"Tasks Output: {crew_output.tasks_output}")
print(f"Token Usage: {crew_output.token_usage}")

‚ÄãMemory Utilization
Crews can utilize memory (short-term, long-term, and entity memory) to enhance their execution and learning over time. This feature allows crews to store and recall execution memories, aiding in decision-making and task execution strategies.
‚ÄãCache Utilization
Caches can be employed to store the results of tools‚Äô execution, making the process more efficient by reducing the need to re-execute identical tasks.
‚ÄãCrew Usage Metrics
After the crew execution, you can access the usage_metrics attribute to view the language model (LLM) usage metrics for all tasks executed by the crew. This provides insights into operational efficiency and areas for improvement.
Code# Access the crew's usage metrics
crew = Crew(agents=[agent1, agent2], tasks=[task1, task2])
crew.kickoff()
print(crew.usage_metrics)

‚ÄãCrew Execution Process

Sequential Process: Tasks are executed one after another, allowing for a linear flow of work.
Hierarchical Process: A manager agent coordinates the crew, delegating tasks and validating outcomes before proceeding. Note: A manager_llm or manager_agent is required for this process and it‚Äôs essential for validating the process flow.

‚ÄãKicking Off a Crew
Once your crew is assembled, initiate the workflow with the kickoff() method. This starts the execution process according to the defined process flow.
Code# Start the crew's task execution
result = my_crew.kickoff()
print(result)

‚ÄãDifferent Ways to Kick Off a Crew
Once your crew is assembled, initiate the workflow with the appropriate kickoff method. CrewAI provides several methods for better control over the kickoff process: kickoff(), kickoff_for_each(), kickoff_async(), and kickoff_for_each_async().

kickoff(): Starts the execution process according to the defined process flow.
kickoff_for_each(): Executes tasks for each agent individually.
kickoff_async(): Initiates the workflow asynchronously.
kickoff_for_each_async(): Executes tasks for each agent individually in an asynchronous manner.

Code# Start the crew's task execution
result = my_crew.kickoff()
print(result)

# Example of using kickoff_for_each
inputs_array = [{'topic': 'AI in healthcare'}, {'topic': 'AI in finance'}]
results = my_crew.kickoff_for_each(inputs=inputs_array)
for result in results:
    print(result)

# Example of using kickoff_async
inputs = {'topic': 'AI in healthcare'}
async_result = my_crew.kickoff_async(inputs=inputs)
print(async_result)

# Example of using kickoff_for_each_async
inputs_array = [{'topic': 'AI in healthcare'}, {'topic': 'AI in finance'}]
async_results = my_crew.kickoff_for_each_async(inputs=inputs_array)
for async_result in async_results:
    print(async_result)

These methods provide flexibility in how you manage and execute tasks within your crew, allowing for both synchronous and asynchronous workflows tailored to your needs.
‚ÄãReplaying from a Specific Task
You can now replay from a specific task using our CLI command replay.
The replay feature in CrewAI allows you to replay from a specific task using the command-line interface (CLI). By running the command crewai replay -t <task_id>, you can specify the task_id for the replay process.
Kickoffs will now save the latest kickoffs returned task outputs locally for you to be able to replay from.
‚ÄãReplaying from a Specific Task Using the CLI
To use the replay feature, follow these steps:

Open your terminal or command prompt.
Navigate to the directory where your CrewAI project is located.
Run the following command:

To view the latest kickoff task IDs, use:
crewai log-tasks-outputs

Then, to replay from a specific task, use:
crewai replay -t <task_id>

These commands let you replay from your latest kickoff tasks, still retaining context from previously executed tasks.Was this page helpful?YesNoTasksFlowswebsitexgithublinkedinyoutubePowered by MintlifyOn this pageWhat is a Crew?Crew AttributesCrew OutputCrew Output AttributesCrew Output Methods and PropertiesAccessing Crew OutputsExampleMemory UtilizationCache UtilizationCrew Usage MetricsCrew Execution ProcessKicking Off a CrewDifferent Ways to Kick Off a CrewReplaying from a Specific TaskReplaying from a Specific Task Using the CLI

Page: https://docs.crewai.com/concepts/flows

Flows - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationCore ConceptsFlowsGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryCore ConceptsFlowsLearn how to create and manage AI workflows using CrewAI Flows.‚ÄãIntroduction
CrewAI Flows is a powerful feature designed to streamline the creation and management of AI workflows. Flows allow developers to combine and coordinate coding tasks and Crews efficiently, providing a robust framework for building sophisticated AI automations.
Flows allow you to create structured, event-driven workflows. They provide a seamless way to connect multiple tasks, manage state, and control the flow of execution in your AI applications. With Flows, you can easily design and implement multi-step processes that leverage the full potential of CrewAI‚Äôs capabilities.


Simplified Workflow Creation: Easily chain together multiple Crews and tasks to create complex AI workflows.


State Management: Flows make it super easy to manage and share state between different tasks in your workflow.


Event-Driven Architecture: Built on an event-driven model, allowing for dynamic and responsive workflows.


Flexible Control Flow: Implement conditional logic, loops, and branching within your workflows.


‚ÄãGetting Started
Let‚Äôs create a simple Flow where you will use OpenAI to generate a random city in one task and then use that city to generate a fun fact in another task.
Code
from crewai.flow.flow import Flow, listen, start
from dotenv import load_dotenv
from litellm import completion


class ExampleFlow(Flow):
    model = "gpt-4o-mini"

    @start()
    def generate_city(self):
        print("Starting flow")

        response = completion(
            model=self.model,
            messages=[
                {
                    "role": "user",
                    "content": "Return the name of a random city in the world.",
                },
            ],
        )

        random_city = response["choices"][0]["message"]["content"]
        print(f"Random City: {random_city}")

        return random_city

    @listen(generate_city)
    def generate_fun_fact(self, random_city):
        response = completion(
            model=self.model,
            messages=[
                {
                    "role": "user",
                    "content": f"Tell me a fun fact about {random_city}",
                },
            ],
        )

        fun_fact = response["choices"][0]["message"]["content"]
        return fun_fact



flow = ExampleFlow()
result = flow.kickoff()

print(f"Generated fun fact: {result}")

In the above example, we have created a simple Flow that generates a random city using OpenAI and then generates a fun fact about that city. The Flow consists of two tasks: generate_city and generate_fun_fact. The generate_city task is the starting point of the Flow, and the generate_fun_fact task listens for the output of the generate_city task.
When you run the Flow, it will generate a random city and then generate a fun fact about that city. The output will be printed to the console.
Note: Ensure you have set up your .env file to store your OPENAI_API_KEY. This key is necessary for authenticating requests to the OpenAI API.
‚Äã@start()
The @start() decorator is used to mark a method as the starting point of a Flow. When a Flow is started, all the methods decorated with @start() are executed in parallel. You can have multiple start methods in a Flow, and they will all be executed when the Flow is started.
‚Äã@listen()
The @listen() decorator is used to mark a method as a listener for the output of another task in the Flow. The method decorated with @listen() will be executed when the specified task emits an output. The method can access the output of the task it is listening to as an argument.
‚ÄãUsage
The @listen() decorator can be used in several ways:


Listening to a Method by Name: You can pass the name of the method you want to listen to as a string. When that method completes, the listener method will be triggered.
Code@listen("generate_city")
def generate_fun_fact(self, random_city):
    # Implementation



Listening to a Method Directly: You can pass the method itself. When that method completes, the listener method will be triggered.
Code@listen(generate_city)
def generate_fun_fact(self, random_city):
    # Implementation



‚ÄãFlow Output
Accessing and handling the output of a Flow is essential for integrating your AI workflows into larger applications or systems. CrewAI Flows provide straightforward mechanisms to retrieve the final output, access intermediate results, and manage the overall state of your Flow.
‚ÄãRetrieving the Final Output
When you run a Flow, the final output is determined by the last method that completes. The kickoff() method returns the output of this final method.
Here‚Äôs how you can access the final output:

In this example, the second_method is the last method to complete, so its output will be the final output of the Flow.
The kickoff() method will return the final output, which is then printed to the console.
‚ÄãAccessing and Updating State
In addition to retrieving the final output, you can also access and update the state within your Flow. The state can be used to store and share data between different methods in the Flow. After the Flow has run, you can access the state to retrieve any information that was added or updated during the execution.
Here‚Äôs an example of how to update and access the state:

In this example, the state is updated by both first_method and second_method.
After the Flow has run, you can access the final state to see the updates made by these methods.
By ensuring that the final method‚Äôs output is returned and providing access to the state, CrewAI Flows make it easy to integrate the results of your AI workflows into larger applications or systems,
while also maintaining and accessing the state throughout the Flow‚Äôs execution.
‚ÄãFlow State Management
Managing state effectively is crucial for building reliable and maintainable AI workflows. CrewAI Flows provides robust mechanisms for both unstructured and structured state management,
allowing developers to choose the approach that best fits their application‚Äôs needs.
‚ÄãUnstructured State Management
In unstructured state management, all state is stored in the state attribute of the Flow class.
This approach offers flexibility, enabling developers to add or modify state attributes on the fly without defining a strict schema.
Codefrom crewai.flow.flow import Flow, listen, start

class UntructuredExampleFlow(Flow):

    @start()
    def first_method(self):
        self.state.message = "Hello from structured flow"
        self.state.counter = 0

    @listen(first_method)
    def second_method(self):
        self.state.counter += 1
        self.state.message += " - updated"

    @listen(second_method)
    def third_method(self):
        self.state.counter += 1
        self.state.message += " - updated again"

        print(f"State after third_method: {self.state}")


flow = UntructuredExampleFlow()
flow.kickoff()

Key Points:

Flexibility: You can dynamically add attributes to self.state without predefined constraints.
Simplicity: Ideal for straightforward workflows where state structure is minimal or varies significantly.

‚ÄãStructured State Management
Structured state management leverages predefined schemas to ensure consistency and type safety across the workflow.
By using models like Pydantic‚Äôs BaseModel, developers can define the exact shape of the state, enabling better validation and auto-completion in development environments.
Codefrom crewai.flow.flow import Flow, listen, start
from pydantic import BaseModel


class ExampleState(BaseModel):
    counter: int = 0
    message: str = ""


class StructuredExampleFlow(Flow[ExampleState]):

    @start()
    def first_method(self):
        self.state.message = "Hello from structured flow"

    @listen(first_method)
    def second_method(self):
        self.state.counter += 1
        self.state.message += " - updated"

    @listen(second_method)
    def third_method(self):
        self.state.counter += 1
        self.state.message += " - updated again"

        print(f"State after third_method: {self.state}")


flow = StructuredExampleFlow()
flow.kickoff()

Key Points:

Defined Schema: ExampleState clearly outlines the state structure, enhancing code readability and maintainability.
Type Safety: Leveraging Pydantic ensures that state attributes adhere to the specified types, reducing runtime errors.
Auto-Completion: IDEs can provide better auto-completion and error checking based on the defined state model.

‚ÄãChoosing Between Unstructured and Structured State Management


Use Unstructured State Management when:

The workflow‚Äôs state is simple or highly dynamic.
Flexibility is prioritized over strict state definitions.
Rapid prototyping is required without the overhead of defining schemas.



Use Structured State Management when:

The workflow requires a well-defined and consistent state structure.
Type safety and validation are important for your application‚Äôs reliability.
You want to leverage IDE features like auto-completion and type checking for better developer experience.



By providing both unstructured and structured state management options, CrewAI Flows empowers developers to build AI workflows that are both flexible and robust, catering to a wide range of application requirements.
‚ÄãFlow Control
‚ÄãConditional Logic: or
The or_ function in Flows allows you to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.

When you run this Flow, the logger method will be triggered by the output of either the start_method or the second_method.
The or_ function is used to listen to multiple methods and trigger the listener method when any of the specified methods emit an output.
‚ÄãConditional Logic: and
The and_ function in Flows allows you to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.

When you run this Flow, the logger method will be triggered only when both the start_method and the second_method emit an output.
The and_ function is used to listen to multiple methods and trigger the listener method only when all the specified methods emit an output.
‚ÄãRouter
The @router() decorator in Flows allows you to define conditional routing logic based on the output of a method.
You can specify different routes based on the output of the method, allowing you to control the flow of execution dynamically.

In the above example, the start_method generates a random boolean value and sets it in the state.
The second_method uses the @router() decorator to define conditional routing logic based on the value of the boolean.
If the boolean is True, the method returns "success", and if it is False, the method returns "failed".
The third_method and fourth_method listen to the output of the second_method and execute based on the returned value.
When you run this Flow, the output will change based on the random boolean value generated by the start_method.
‚ÄãAdding Crews to Flows
Creating a flow with multiple crews in CrewAI is straightforward.
You can generate a new CrewAI project that includes all the scaffolding needed to create a flow with multiple crews by running the following command:
crewai create flow name_of_flow

This command will generate a new CrewAI project with the necessary folder structure. The generated project includes a prebuilt crew called poem_crew that is already working. You can use this crew as a template by copying, pasting, and editing it to create other crews.
‚ÄãFolder Structure
After running the crewai create flow name_of_flow command, you will see a folder structure similar to the following:
Directory/FileDescriptionname_of_flow/Root directory for the flow.‚îú‚îÄ‚îÄ crews/Contains directories for specific crews.‚îÇ ‚îî‚îÄ‚îÄ poem_crew/Directory for the ‚Äúpoem_crew‚Äù with its configurations and scripts.‚îÇ ‚îú‚îÄ‚îÄ config/Configuration files directory for the ‚Äúpoem_crew‚Äù.‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ agents.yamlYAML file defining the agents for ‚Äúpoem_crew‚Äù.‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ tasks.yamlYAML file defining the tasks for ‚Äúpoem_crew‚Äù.‚îÇ ‚îú‚îÄ‚îÄ poem_crew.pyScript for ‚Äúpoem_crew‚Äù functionality.‚îú‚îÄ‚îÄ tools/Directory for additional tools used in the flow.‚îÇ ‚îî‚îÄ‚îÄ custom_tool.pyCustom tool implementation.‚îú‚îÄ‚îÄ main.pyMain script for running the flow.‚îú‚îÄ‚îÄ README.mdProject description and instructions.‚îú‚îÄ‚îÄ pyproject.tomlConfiguration file for project dependencies and settings.‚îî‚îÄ‚îÄ .gitignoreSpecifies files and directories to ignore in version control.
‚ÄãBuilding Your Crews
In the crews folder, you can define multiple crews. Each crew will have its own folder containing configuration files and the crew definition file. For example, the poem_crew folder contains:

config/agents.yaml: Defines the agents for the crew.
config/tasks.yaml: Defines the tasks for the crew.
poem_crew.py: Contains the crew definition, including agents, tasks, and the crew itself.

You can copy, paste, and edit the poem_crew to create other crews.
‚ÄãConnecting Crews in main.py
The main.py file is where you create your flow and connect the crews together. You can define your flow by using the Flow class and the decorators @start and @listen to specify the flow of execution.
Here‚Äôs an example of how you can connect the poem_crew in the main.py file:
Code#!/usr/bin/env python
from random import randint

from pydantic import BaseModel
from crewai.flow.flow import Flow, listen, start
from .crews.poem_crew.poem_crew import PoemCrew

class PoemState(BaseModel):
    sentence_count: int = 1
    poem: str = ""

class PoemFlow(Flow[PoemState]):

    @start()
    def generate_sentence_count(self):
        print("Generating sentence count")
        self.state.sentence_count = randint(1, 5)

    @listen(generate_sentence_count)
    def generate_poem(self):
        print("Generating poem")
        result = PoemCrew().crew().kickoff(inputs={"sentence_count": self.state.sentence_count})

        print("Poem generated", result.raw)
        self.state.poem = result.raw

    @listen(generate_poem)
    def save_poem(self):
        print("Saving poem")
        with open("poem.txt", "w") as f:
            f.write(self.state.poem)

def kickoff():
    poem_flow = PoemFlow()
    poem_flow.kickoff()


def plot():
    poem_flow = PoemFlow()
    poem_flow.plot()

if __name__ == "__main__":
    kickoff()

In this example, the PoemFlow class defines a flow that generates a sentence count, uses the PoemCrew to generate a poem, and then saves the poem to a file. The flow is kicked off by calling the kickoff() method.
‚ÄãRunning the Flow
(Optional) Before running the flow, you can install the dependencies by running:
crewai install

Once all of the dependencies are installed, you need to activate the virtual environment by running:
source .venv/bin/activate

After activating the virtual environment, you can run the flow by executing one of the following commands:
crewai flow kickoff

or
uv run kickoff

The flow will execute, and you should see the output in the console.
‚ÄãPlot Flows
Visualizing your AI workflows can provide valuable insights into the structure and execution paths of your flows. CrewAI offers a powerful visualization tool that allows you to generate interactive plots of your flows, making it easier to understand and optimize your AI workflows.
‚ÄãWhat are Plots?
Plots in CrewAI are graphical representations of your AI workflows. They display the various tasks, their connections, and the flow of data between them. This visualization helps in understanding the sequence of operations, identifying bottlenecks, and ensuring that the workflow logic aligns with your expectations.
‚ÄãHow to Generate a Plot
CrewAI provides two convenient methods to generate plots of your flows:
‚ÄãOption 1: Using the plot() Method
If you are working directly with a flow instance, you can generate a plot by calling the plot() method on your flow object. This method will create an HTML file containing the interactive plot of your flow.
Code# Assuming you have a flow instance
flow.plot("my_flow_plot")

This will generate a file named my_flow_plot.html in your current directory. You can open this file in a web browser to view the interactive plot.
‚ÄãOption 2: Using the Command Line
If you are working within a structured CrewAI project, you can generate a plot using the command line. This is particularly useful for larger projects where you want to visualize the entire flow setup.
crewai flow plot

This command will generate an HTML file with the plot of your flow, similar to the plot() method. The file will be saved in your project directory, and you can open it in a web browser to explore the flow.
‚ÄãUnderstanding the Plot
The generated plot will display nodes representing the tasks in your flow, with directed edges indicating the flow of execution. The plot is interactive, allowing you to zoom in and out, and hover over nodes to see additional details.
By visualizing your flows, you can gain a clearer understanding of the workflow‚Äôs structure, making it easier to debug, optimize, and communicate your AI processes to others.
‚ÄãConclusion
Plotting your flows is a powerful feature of CrewAI that enhances your ability to design and manage complex AI workflows. Whether you choose to use the plot() method or the command line, generating plots will provide you with a visual representation of your workflows, aiding in both development and presentation.
‚ÄãNext Steps
If you‚Äôre interested in exploring additional examples of flows, we have a variety of recommendations in our examples repository. Here are four specific flow examples, each showcasing unique use cases to help you match your current problem type to a specific example:


Email Auto Responder Flow: This example demonstrates an infinite loop where a background job continually runs to automate email responses. It‚Äôs a great use case for tasks that need to be performed repeatedly without manual intervention. View Example


Lead Score Flow: This flow showcases adding human-in-the-loop feedback and handling different conditional branches using the router. It‚Äôs an excellent example of how to incorporate dynamic decision-making and human oversight into your workflows. View Example


Write a Book Flow: This example excels at chaining multiple crews together, where the output of one crew is used by another. Specifically, one crew outlines an entire book, and another crew generates chapters based on the outline. Eventually, everything is connected to produce a complete book. This flow is perfect for complex, multi-step processes that require coordination between different tasks. View Example


Meeting Assistant Flow: This flow demonstrates how to broadcast one event to trigger multiple follow-up actions. For instance, after a meeting is completed, the flow can update a Trello board, send a Slack message, and save the results. It‚Äôs a great example of handling multiple outcomes from a single event, making it ideal for comprehensive task management and notification systems. View Example


By exploring these examples, you can gain insights into how to leverage CrewAI Flows for various use cases, from automating repetitive tasks to managing complex, multi-step processes with dynamic decision-making and human feedback.
Also, check out our YouTube video on how to use flows in CrewAI below!
Was this page helpful?YesNoCrewsLLMswebsitexgithublinkedinyoutubePowered by MintlifyOn this pageIntroductionGetting Started@start()@listen()UsageFlow OutputRetrieving the Final OutputAccessing and Updating StateFlow State ManagementUnstructured State ManagementStructured State ManagementChoosing Between Unstructured and Structured State ManagementFlow ControlConditional Logic: orConditional Logic: andRouterAdding Crews to FlowsFolder StructureBuilding Your CrewsConnecting Crews in main.pyRunning the FlowPlot FlowsWhat are Plots?How to Generate a PlotOption 1: Using the plot() MethodOption 2: Using the Command LineUnderstanding the PlotConclusionNext Steps

Page: https://docs.crewai.com/concepts/llms

LLMs - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationCore ConceptsLLMsGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryCore ConceptsLLMsLearn how to configure and optimize LLMs for your CrewAI projects.‚ÄãLarge Language Models (LLMs) in CrewAI
Large Language Models (LLMs) are the backbone of intelligent agents in the CrewAI framework. This guide will help you understand, configure, and optimize LLM usage for your CrewAI projects.
‚ÄãKey Concepts

LLM: Large Language Model, the AI powering agent intelligence
Agent: A CrewAI entity that uses an LLM to perform tasks
Provider: A service that offers LLM capabilities (e.g., OpenAI, Anthropic, Ollama, more providers)

‚ÄãConfiguring LLMs for Agents
CrewAI offers flexible options for setting up LLMs:
‚Äã1. Default Configuration
By default, CrewAI uses the gpt-4o-mini model. It uses environment variables if no LLM is specified:

OPENAI_MODEL_NAME (defaults to ‚Äúgpt-4o-mini‚Äù if not set)
OPENAI_API_BASE
OPENAI_API_KEY

‚Äã2. String Identifier
Codeagent = Agent(llm="gpt-4o", ...)

‚Äã3. LLM Instance
List of more providers.
Codefrom crewai import LLM

llm = LLM(model="gpt-4", temperature=0.7)
agent = Agent(llm=llm, ...)

‚Äã4. Custom LLM Objects
Pass a custom LLM implementation or object from another library.
‚ÄãConnecting to OpenAI-Compatible LLMs
You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:

Using environment variables:

Codeimport os

os.environ["OPENAI_API_KEY"] = "your-api-key"
os.environ["OPENAI_API_BASE"] = "https://api.your-provider.com/v1"


Using LLM class attributes:

Codefrom crewai import LLM

llm = LLM(
    model="custom-model-name",
    api_key="your-api-key",
    base_url="https://api.your-provider.com/v1"
)
agent = Agent(llm=llm, ...)

‚ÄãLLM Configuration Options
When configuring an LLM for your agent, you have access to a wide range of parameters:
ParameterTypeDescriptionmodelstrName of the model to use (e.g., ‚Äúgpt-4‚Äù, ‚Äúgpt-3.5-turbo‚Äù, ‚Äúollama/llama3.1‚Äù). For more options, visit the providers documentation.timeoutfloat, intMaximum time (in seconds) to wait for a response.temperaturefloatControls randomness in output (0.0 to 1.0).top_pfloatControls diversity of output (0.0 to 1.0).nintNumber of completions to generate.stopstr, List[str]Sequence(s) where generation should stop.max_tokensintMaximum number of tokens to generate.presence_penaltyfloatPenalizes new tokens based on their presence in prior text.frequency_penaltyfloatPenalizes new tokens based on their frequency in prior text.logit_biasDict[int, float]Modifies likelihood of specified tokens appearing.response_formatDict[str, Any]Specifies the format of the response (e.g., JSON object).seedintSets a random seed for deterministic results.logprobsboolReturns log probabilities of output tokens if enabled.top_logprobsintNumber of most likely tokens for which to return log probabilities.base_urlstrThe base URL for the API endpoint.api_versionstrVersion of the API to use.api_keystrYour API key for authentication.
‚ÄãOpenAI Example Configuration
Codefrom crewai import LLM

llm = LLM(
    model="gpt-4",
    temperature=0.8,
    max_tokens=150,
    top_p=0.9,
    frequency_penalty=0.1,
    presence_penalty=0.1,
    stop=["END"],
    seed=42,
    base_url="https://api.openai.com/v1",
    api_key="your-api-key-here"
)
agent = Agent(llm=llm, ...)

‚ÄãCerebras Example Configuration
Codefrom crewai import LLM

llm = LLM(
    model="cerebras/llama-3.1-70b",
    base_url="https://api.cerebras.ai/v1",
    api_key="your-api-key-here"
)
agent = Agent(llm=llm, ...) 

‚ÄãUsing Ollama (Local LLMs)
CrewAI supports using Ollama for running open-source models locally:

Install Ollama: ollama.ai
Run a model: ollama run llama2
Configure agent:

Codefrom crewai import LLM

agent = Agent(
    llm=LLM(model="ollama/llama3.1", base_url="http://localhost:11434"),
    ...
)

‚ÄãChanging the Base API URL
You can change the base API URL for any LLM provider by setting the base_url parameter:
Codefrom crewai import LLM

llm = LLM(
    model="custom-model-name",
    base_url="https://api.your-provider.com/v1",
    api_key="your-api-key"
)
agent = Agent(llm=llm, ...)

This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider.
‚ÄãBest Practices

Choose the right model: Balance capability and cost.
Optimize prompts: Clear, concise instructions improve output.
Manage tokens: Monitor and limit token usage for efficiency.
Use appropriate temperature: Lower for factual tasks, higher for creative ones.
Implement error handling: Gracefully manage API errors and rate limits.

‚ÄãTroubleshooting

API Errors: Check your API key, network connection, and rate limits.
Unexpected Outputs: Refine your prompts and adjust temperature or top_p.
Performance Issues: Consider using a more powerful model or optimizing your queries.
Timeout Errors: Increase the timeout parameter or optimize your input.
Was this page helpful?YesNoFlowsProcesseswebsitexgithublinkedinyoutubePowered by MintlifyOn this pageLarge Language Models (LLMs) in CrewAIKey ConceptsConfiguring LLMs for Agents1. Default Configuration2. String Identifier3. LLM Instance4. Custom LLM ObjectsConnecting to OpenAI-Compatible LLMsLLM Configuration OptionsOpenAI Example ConfigurationCerebras Example ConfigurationUsing Ollama (Local LLMs)Changing the Base API URLBest PracticesTroubleshooting

Page: https://docs.crewai.com/concepts/processes

Processes - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationCore ConceptsProcessesGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryCore ConceptsProcessesDetailed guide on workflow management through processes in CrewAI, with updated implementation details.‚ÄãUnderstanding Processes
Processes orchestrate the execution of tasks by agents, akin to project management in human teams.
These processes ensure tasks are distributed and executed efficiently, in alignment with a predefined strategy.
‚ÄãProcess Implementations

Sequential: Executes tasks sequentially, ensuring tasks are completed in an orderly progression.
Hierarchical: Organizes tasks in a managerial hierarchy, where tasks are delegated and executed based on a structured chain of command. A manager language model (manager_llm) or a custom manager agent (manager_agent) must be specified in the crew to enable the hierarchical process, facilitating the creation and management of tasks by the manager.
Consensual Process (Planned): Aiming for collaborative decision-making among agents on task execution, this process type introduces a democratic approach to task management within CrewAI. It is planned for future development and is not currently implemented in the codebase.

‚ÄãThe Role of Processes in Teamwork
Processes enable individual agents to operate as a cohesive unit, streamlining their efforts to achieve common objectives with efficiency and coherence.
‚ÄãAssigning Processes to a Crew
To assign a process to a crew, specify the process type upon crew creation to set the execution strategy. For a hierarchical process, ensure to define manager_llm or manager_agent for the manager agent.
from crewai import Crew
from crewai.process import Process
from langchain_openai import ChatOpenAI

# Example: Creating a crew with a sequential process
crew = Crew(
    agents=my_agents,
    tasks=my_tasks,
    process=Process.sequential
)

# Example: Creating a crew with a hierarchical process
# Ensure to provide a manager_llm or manager_agent
crew = Crew(
    agents=my_agents,
    tasks=my_tasks,
    process=Process.hierarchical,
    manager_llm=ChatOpenAI(model="gpt-4")
    # or
    # manager_agent=my_manager_agent
)

Note: Ensure my_agents and my_tasks are defined prior to creating a Crew object, and for the hierarchical process, either manager_llm or manager_agent is also required.
‚ÄãSequential Process
This method mirrors dynamic team workflows, progressing through tasks in a thoughtful and systematic manner. Task execution follows the predefined order in the task list, with the output of one task serving as context for the next.
To customize task context, utilize the context parameter in the Task class to specify outputs that should be used as context for subsequent tasks.
‚ÄãHierarchical Process
Emulates a corporate hierarchy, CrewAI allows specifying a custom manager agent or automatically creates one, requiring the specification of a manager language model (manager_llm). This agent oversees task execution, including planning, delegation, and validation. Tasks are not pre-assigned; the manager allocates tasks to agents based on their capabilities, reviews outputs, and assesses task completion.
‚ÄãProcess Class: Detailed Overview
The Process class is implemented as an enumeration (Enum), ensuring type safety and restricting process values to the defined types (sequential, hierarchical). The consensual process is planned for future inclusion, emphasizing our commitment to continuous development and innovation.
‚ÄãConclusion
The structured collaboration facilitated by processes within CrewAI is crucial for enabling systematic teamwork among agents.
This documentation has been updated to reflect the latest features, enhancements, and the planned integration of the Consensual Process, ensuring users have access to the most current and comprehensive information.Was this page helpful?YesNoLLMsCollaborationwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageUnderstanding ProcessesProcess ImplementationsThe Role of Processes in TeamworkAssigning Processes to a CrewSequential ProcessHierarchical ProcessProcess Class: Detailed OverviewConclusion

Page: https://docs.crewai.com/concepts/collaboration

Collaboration - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationCore ConceptsCollaborationGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryCore ConceptsCollaborationExploring the dynamics of agent collaboration within the CrewAI framework, focusing on the newly integrated features for enhanced functionality.‚ÄãCollaboration Fundamentals
Collaboration in CrewAI is fundamental, enabling agents to combine their skills, share information, and assist each other in task execution, embodying a truly cooperative ecosystem.

Information Sharing: Ensures all agents are well-informed and can contribute effectively by sharing data and findings.
Task Assistance: Allows agents to seek help from peers with the required expertise for specific tasks.
Resource Allocation: Optimizes task execution through the efficient distribution and sharing of resources among agents.

‚ÄãEnhanced Attributes for Improved Collaboration
The Crew class has been enriched with several attributes to support advanced functionalities:
FeatureDescriptionLanguage Model Management (manager_llm, function_calling_llm)Manages language models for executing tasks and tools. manager_llm is required for hierarchical processes, while function_calling_llm is optional with a default value for streamlined interactions.Custom Manager Agent (manager_agent)Specifies a custom agent as the manager, replacing the default CrewAI manager.Process Flow (process)Defines execution logic (e.g., sequential, hierarchical) for task distribution.Verbose Logging (verbose)Provides detailed logging for monitoring and debugging. Accepts integer and boolean values to control verbosity level.Rate Limiting (max_rpm)Limits requests per minute to optimize resource usage. Setting guidelines depend on task complexity and load.Internationalization / Customization (language, prompt_file)Supports prompt customization for global usability. Example of fileExecution and Output Handling (full_output)Controls output granularity, distinguishing between full and final outputs.Callback and Telemetry (step_callback, task_callback)Enables step-wise and task-level execution monitoring and telemetry for performance analytics.Crew Sharing (share_crew)Allows sharing crew data with CrewAI for model improvement. Privacy implications and benefits should be considered.Usage Metrics (usage_metrics)Logs all LLM usage metrics during task execution for performance insights.Memory Usage (memory)Enables memory for storing execution history, aiding in agent learning and task efficiency.Embedder Configuration (embedder)Configures the embedder for language understanding and generation, with support for provider customization.Cache Management (cache)Specifies whether to cache tool execution results, enhancing performance.Output Logging (output_log_file)Defines the file path for logging crew execution output.Planning Mode (planning)Enables action planning before task execution. Set planning=True to activate.Replay Feature (replay)Provides CLI for listing tasks from the last run and replaying from specific tasks, aiding in task management and troubleshooting.
‚ÄãDelegation (Dividing to Conquer)
Delegation enhances functionality by allowing agents to intelligently assign tasks or seek help, thereby amplifying the crew‚Äôs overall capability.
‚ÄãImplementing Collaboration and Delegation
Setting up a crew involves defining the roles and capabilities of each agent. CrewAI seamlessly manages their interactions, ensuring efficient collaboration and delegation, with enhanced customization and monitoring features to adapt to various operational needs.
‚ÄãExample Scenario
Consider a crew with a researcher agent tasked with data gathering and a writer agent responsible for compiling reports. The integration of advanced language model management and process flow attributes allows for more sophisticated interactions, such as the writer delegating complex research tasks to the researcher or querying specific information, thereby facilitating a seamless workflow.
‚ÄãConclusion
The integration of advanced attributes and functionalities into the CrewAI framework significantly enriches the agent collaboration ecosystem. These enhancements not only simplify interactions but also offer unprecedented flexibility and control, paving the way for sophisticated AI-driven solutions capable of tackling complex tasks through intelligent collaboration and delegation.Was this page helpful?YesNoProcessesTrainingwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageCollaboration FundamentalsEnhanced Attributes for Improved CollaborationDelegation (Dividing to Conquer)Implementing Collaboration and DelegationExample ScenarioConclusion

Page: https://docs.crewai.com/concepts/training

Training - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationCore ConceptsTrainingGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryCore ConceptsTrainingLearn how to train your CrewAI agents by giving them feedback early on and get consistent results.‚ÄãIntroduction
The training feature in CrewAI allows you to train your AI agents using the command-line interface (CLI).
By running the command crewai train -n <n_iterations>, you can specify the number of iterations for the training process.
During training, CrewAI utilizes techniques to optimize the performance of your agents along with human feedback.
This helps the agents improve their understanding, decision-making, and problem-solving abilities.
‚ÄãTraining Your Crew Using the CLI
To use the training feature, follow these steps:

Open your terminal or command prompt.
Navigate to the directory where your CrewAI project is located.
Run the following command:

crewai train -n <n_iterations> <filename> (optional)

Replace <n_iterations> with the desired number of training iterations and <filename> with the appropriate filename ending with .pkl.
‚ÄãTraining Your Crew Programmatically
To train your crew programmatically, use the following steps:

Define the number of iterations for training.
Specify the input parameters for the training process.
Execute the training command within a try-except block to handle potential errors.

Coden_iterations = 2
inputs = {"topic": "CrewAI Training"}
filename = "your_model.pkl"

try:
    YourCrewName_Crew().crew().train(
      n_iterations=n_iterations, 
      inputs=inputs, 
      filename=filename
    )

except Exception as e:
    raise Exception(f"An error occurred while training the crew: {e}")

‚ÄãKey Points to Note

Positive Integer Requirement: Ensure that the number of iterations (n_iterations) is a positive integer. The code will raise a ValueError if this condition is not met.
Filename Requirement: Ensure that the filename ends with .pkl. The code will raise a ValueError if this condition is not met.
Error Handling: The code handles subprocess errors and unexpected exceptions, providing error messages to the user.

It is important to note that the training process may take some time, depending on the complexity of your agents and will also require your feedback on each iteration.
Once the training is complete, your agents will be equipped with enhanced capabilities and knowledge, ready to tackle complex tasks and provide more consistent and valuable insights.
Remember to regularly update and retrain your agents to ensure they stay up-to-date with the latest information and advancements in the field.
Happy training with CrewAI! üöÄWas this page helpful?YesNoCollaborationMemorywebsitexgithublinkedinyoutubePowered by MintlifyOn this pageIntroductionTraining Your Crew Using the CLITraining Your Crew ProgrammaticallyKey Points to Note

Page: https://docs.crewai.com/concepts/memory

Memory - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationCore ConceptsMemoryGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryCore ConceptsMemoryLeveraging memory systems in the CrewAI framework to enhance agent capabilities.‚ÄãIntroduction to Memory Systems in CrewAI
The crewAI framework introduces a sophisticated memory system designed to significantly enhance the capabilities of AI agents.
This system comprises short-term memory, long-term memory, entity memory, and contextual memory, each serving a unique purpose in aiding agents to remember,
reason, and learn from past interactions.
‚ÄãMemory System Components
ComponentDescriptionShort-Term MemoryTemporarily stores recent interactions and outcomes using RAG, enabling agents to recall and utilize information relevant to their current context during the current executions.Long-Term MemoryPreserves valuable insights and learnings from past executions, allowing agents to build and refine their knowledge over time.Entity MemoryCaptures and organizes information about entities (people, places, concepts) encountered during tasks, facilitating deeper understanding and relationship mapping. Uses RAG for storing entity information.Contextual MemoryMaintains the context of interactions by combining ShortTermMemory, LongTermMemory, and EntityMemory, aiding in the coherence and relevance of agent responses over a sequence of tasks or a conversation.
‚ÄãHow Memory Systems Empower Agents


Contextual Awareness: With short-term and contextual memory, agents gain the ability to maintain context over a conversation or task sequence, leading to more coherent and relevant responses.


Experience Accumulation: Long-term memory allows agents to accumulate experiences, learning from past actions to improve future decision-making and problem-solving.


Entity Understanding: By maintaining entity memory, agents can recognize and remember key entities, enhancing their ability to process and interact with complex information.


‚ÄãImplementing Memory in Your Crew
When configuring a crew, you can enable and customize each memory component to suit the crew‚Äôs objectives and the nature of tasks it will perform.
By default, the memory system is disabled, and you can ensure it is active by setting memory=True in the crew configuration.
The memory will use OpenAI embeddings by default, but you can change it by setting embedder to a different model.
It‚Äôs also possible to initialize the memory instance with your own instance.
The ‚Äòembedder‚Äô only applies to Short-Term Memory which uses Chroma for RAG.
The Long-Term Memory uses SQLite3 to store task results. Currently, there is no way to override these storage implementations.
The data storage files are saved into a platform-specific location found using the appdirs package,
and the name of the project can be overridden using the CREWAI_STORAGE_DIR environment variable.
‚ÄãExample: Configuring Memory for a Crew
Codefrom crewai import Crew, Agent, Task, Process

# Assemble your crew with memory capabilities
my_crew = Crew(
    agents=[...],
    tasks=[...],
    process=Process.sequential,
    memory=True,
    verbose=True
)

‚ÄãExample: Use Custom Memory Instances e.g FAISS as the VectorDB
Codefrom crewai import Crew, Agent, Task, Process

# Assemble your crew with memory capabilities
my_crew = Crew(
    agents=[...],
    tasks=[...],
    process="Process.sequential",
    memory=True,
    long_term_memory=EnhanceLongTermMemory(
        storage=LTMSQLiteStorage(
            db_path="/my_data_dir/my_crew1/long_term_memory_storage.db"
        )
    ),
    short_term_memory=EnhanceShortTermMemory(
        storage=CustomRAGStorage(
            crew_name="my_crew",
            storage_type="short_term",
            data_dir="//my_data_dir",
            model=embedder["model"],
            dimension=embedder["dimension"],
        ),
    ),
    entity_memory=EnhanceEntityMemory(
        storage=CustomRAGStorage(
            crew_name="my_crew",
            storage_type="entities",
            data_dir="//my_data_dir",
            model=embedder["model"],
            dimension=embedder["dimension"],
        ),
    ),
    verbose=True,
)

‚ÄãAdditional Embedding Providers
‚ÄãUsing OpenAI embeddings (already default)
Codefrom crewai import Crew, Agent, Task, Process

my_crew = Crew(
    agents=[...],
    tasks=[...],
    process=Process.sequential,
    memory=True,
    verbose=True,
    embedder=embedding_functions.OpenAIEmbeddingFunction(
            api_key=os.getenv("OPENAI_API_KEY"), model_name="text-embedding-3-small"
        )
)

‚ÄãUsing Google AI embeddings
Codefrom crewai import Crew, Agent, Task, Process

my_crew = Crew(
    agents=[...],
    tasks=[...],
    process=Process.sequential,
    memory=True,
    verbose=True,
    embedder=embedding_functions.OpenAIEmbeddingFunction(
            api_key=os.getenv("OPENAI_API_KEY"),
            model_name="text-embedding-ada-002"
    )
)

‚ÄãUsing Azure OpenAI embeddings
Codefrom crewai import Crew, Agent, Task, Process

my_crew = Crew(
    agents=[...],
    tasks=[...],
    process=Process.sequential,
    memory=True,
    verbose=True,
    embedder=embedding_functions.OpenAIEmbeddingFunction(
        api_key="YOUR_API_KEY",
        api_base="YOUR_API_BASE_PATH",
        api_type="azure",
        api_version="YOUR_API_VERSION",
        model_name="text-embedding-3-small"
    )
)

‚ÄãUsing Vertex AI embeddings
Codefrom crewai import Crew, Agent, Task, Process

my_crew = Crew(
    agents=[...],
    tasks=[...],
    process=Process.sequential,
    memory=True,
    verbose=True,
    embedder=embedding_functions.GoogleVertexEmbeddingFunction(
        project_id="YOUR_PROJECT_ID",
        region="YOUR_REGION",
        api_key="YOUR_API_KEY",
        model_name="textembedding-gecko"
    )
)

‚ÄãUsing Cohere embeddings
Codefrom crewai import Crew, Agent, Task, Process

my_crew = Crew(
    agents=[...],
    tasks=[...],
    process=Process.sequential,
    memory=True,
    verbose=True,
    embedder=embedding_functions.CohereEmbeddingFunction(
        api_key=YOUR_API_KEY,
        model_name="<model_name>"
    )
)

‚ÄãResetting Memory
crewai reset-memories [OPTIONS]

‚ÄãResetting Memory Options
OptionDescriptionTypeDefault-l, --longReset LONG TERM memory.Flag (boolean)False-s, --shortReset SHORT TERM memory.Flag (boolean)False-e, --entitiesReset ENTITIES memory.Flag (boolean)False-k, --kickoff-outputsReset LATEST KICKOFF TASK OUTPUTS.Flag (boolean)False-a, --allReset ALL memories.Flag (boolean)False
‚ÄãBenefits of Using CrewAI‚Äôs Memory System

ü¶æ Adaptive Learning: Crews become more efficient over time, adapting to new information and refining their approach to tasks.
ü´° Enhanced Personalization: Memory enables agents to remember user preferences and historical interactions, leading to personalized experiences.
üß† Improved Problem Solving: Access to a rich memory store aids agents in making more informed decisions, drawing on past learnings and contextual insights.

‚ÄãConclusion
Integrating CrewAI‚Äôs memory system into your projects is straightforward. By leveraging the provided memory components and configurations,
you can quickly empower your agents with the ability to remember, reason, and learn from their interactions, unlocking new levels of intelligence and capability.Was this page helpful?YesNoTrainingPlanningwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageIntroduction to Memory Systems in CrewAIMemory System ComponentsHow Memory Systems Empower AgentsImplementing Memory in Your CrewExample: Configuring Memory for a CrewExample: Use Custom Memory Instances e.g FAISS as the VectorDBAdditional Embedding ProvidersUsing OpenAI embeddings (already default)Using Google AI embeddingsUsing Azure OpenAI embeddingsUsing Vertex AI embeddingsUsing Cohere embeddingsResetting MemoryResetting Memory OptionsBenefits of Using CrewAI‚Äôs Memory SystemConclusion

Page: https://docs.crewai.com/concepts/planning

Planning - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationCore ConceptsPlanningGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryCore ConceptsPlanningLearn how to add planning to your CrewAI Crew and improve their performance.‚ÄãIntroduction
The planning feature in CrewAI allows you to add planning capability to your crew. When enabled, before each Crew iteration,
all Crew information is sent to an AgentPlanner that will plan the tasks step by step, and this plan will be added to each task description.
‚ÄãUsing the Planning Feature
Getting started with the planning feature is very easy, the only step required is to add planning=True to your Crew:

From this point on, your crew will have planning enabled, and the tasks will be planned before each iteration.
‚ÄãPlanning LLM
Now you can define the LLM that will be used to plan the tasks. You can use any ChatOpenAI LLM model available.
When running the base case example, you will see something like the output below, which represents the output of the AgentPlanner
responsible for creating the step-by-step logic to add to the Agents‚Äô tasks.
Was this page helpful?YesNoMemoryTestingwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageIntroductionUsing the Planning FeaturePlanning LLM

Page: https://docs.crewai.com/concepts/testing

Testing - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationCore ConceptsTestingGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryCore ConceptsTestingLearn how to test your CrewAI Crew and evaluate their performance.‚ÄãIntroduction
Testing is a crucial part of the development process, and it is essential to ensure that your crew is performing as expected. With crewAI, you can easily test your crew and evaluate its performance using the built-in testing capabilities.
‚ÄãUsing the Testing Feature
We added the CLI command crewai test to make it easy to test your crew. This command will run your crew for a specified number of iterations and provide detailed performance metrics. The parameters are n_iterations and model, which are optional and default to 2 and gpt-4o-mini respectively. For now, the only provider available is OpenAI.
crewai test

If you want to run more iterations or use a different model, you can specify the parameters like this:
crewai test --n_iterations 5 --model gpt-4o

or using the short forms:
crewai test -n 5 -m gpt-4o

When you run the crewai test command, the crew will be executed for the specified number of iterations, and the performance metrics will be displayed at the end of the run.
A table of scores at the end will show the performance of the crew in terms of the following metrics:

Tasks/Crew/AgentsRun 1Run 2Avg. TotalAgentsAdditional InfoTask 19.09.59.2Professional InsightsResearcherTask 29.010.09.5Company Profile InvestigatorTask 39.09.09.0Automation InsightsSpecialistTask 49.09.09.0Final Report CompilerAutomation Insights SpecialistCrew9.009.389.2Execution Time (s)126145135
The example above shows the test results for two runs of the crew with two tasks, with the average total score for each task and the crew as a whole.Was this page helpful?YesNoPlanningCLIwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageIntroductionUsing the Testing Feature

Page: https://docs.crewai.com/concepts/cli

CLI - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationCore ConceptsCLIGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryCore ConceptsCLILearn how to use the CrewAI CLI to interact with CrewAI.‚ÄãCrewAI CLI Documentation
The CrewAI CLI provides a set of commands to interact with CrewAI, allowing you to create, train, run, and manage crews and pipelines.
‚ÄãInstallation
To use the CrewAI CLI, make sure you have CrewAI installed:
pip install crewai

‚ÄãBasic Usage
The basic structure of a CrewAI CLI command is:
crewai [COMMAND] [OPTIONS] [ARGUMENTS]

‚ÄãAvailable Commands
‚Äã1. Create
Create a new crew or pipeline.
crewai create [OPTIONS] TYPE NAME


TYPE: Choose between ‚Äúcrew‚Äù or ‚Äúpipeline‚Äù
NAME: Name of the crew or pipeline
--router: (Optional) Create a pipeline with router functionality

Example:
crewai create crew my_new_crew
crewai create pipeline my_new_pipeline --router

‚Äã2. Version
Show the installed version of CrewAI.
crewai version [OPTIONS]


--tools: (Optional) Show the installed version of CrewAI tools

Example:
crewai version
crewai version --tools

‚Äã3. Train
Train the crew for a specified number of iterations.
crewai train [OPTIONS]


-n, --n_iterations INTEGER: Number of iterations to train the crew (default: 5)
-f, --filename TEXT: Path to a custom file for training (default: ‚Äútrained_agents_data.pkl‚Äù)

Example:
crewai train -n 10 -f my_training_data.pkl

‚Äã4. Replay
Replay the crew execution from a specific task.
crewai replay [OPTIONS]


-t, --task_id TEXT: Replay the crew from this task ID, including all subsequent tasks

Example:
crewai replay -t task_123456

‚Äã5. Log-tasks-outputs
Retrieve your latest crew.kickoff() task outputs.
crewai log-tasks-outputs

‚Äã6. Reset-memories
Reset the crew memories (long, short, entity, latest_crew_kickoff_outputs).
crewai reset-memories [OPTIONS]


-l, --long: Reset LONG TERM memory
-s, --short: Reset SHORT TERM memory
-e, --entities: Reset ENTITIES memory
-k, --kickoff-outputs: Reset LATEST KICKOFF TASK OUTPUTS
-a, --all: Reset ALL memories

Example:
crewai reset-memories --long --short
crewai reset-memories --all

‚Äã7. Test
Test the crew and evaluate the results.
crewai test [OPTIONS]


-n, --n_iterations INTEGER: Number of iterations to test the crew (default: 3)
-m, --model TEXT: LLM Model to run the tests on the Crew (default: ‚Äúgpt-4o-mini‚Äù)

Example:
crewai test -n 5 -m gpt-3.5-turbo

‚Äã8. Run
Run the crew.
crewai run

Make sure to run these commands from the directory where your CrewAI project is set up.
Some commands may require additional configuration or setup within your project structure.Was this page helpful?YesNoTestingToolswebsitexgithublinkedinyoutubePowered by MintlifyOn this pageCrewAI CLI DocumentationInstallationBasic UsageAvailable Commands1. Create2. Version3. Train4. Replay5. Log-tasks-outputs6. Reset-memories7. Test8. Run

Page: https://docs.crewai.com/concepts/tools

Tools - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationCore ConceptsToolsGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryCore ConceptsToolsUnderstanding and leveraging tools within the CrewAI framework for agent collaboration and task execution.‚ÄãIntroduction
CrewAI tools empower agents with capabilities ranging from web searching and data analysis to collaboration and delegating tasks among coworkers.
This documentation outlines how to create, integrate, and leverage these tools within the CrewAI framework, including a new focus on collaboration tools.
‚ÄãWhat is a Tool?
A tool in CrewAI is a skill or function that agents can utilize to perform various actions.
This includes tools from the CrewAI Toolkit and LangChain Tools,
enabling everything from simple searches to complex interactions and effective teamwork among agents.
‚ÄãKey Characteristics of Tools

Utility: Crafted for tasks such as web searching, data analysis, content generation, and agent collaboration.
Integration: Boosts agent capabilities by seamlessly integrating tools into their workflow.
Customizability: Provides the flexibility to develop custom tools or utilize existing ones, catering to the specific needs of agents.
Error Handling: Incorporates robust error handling mechanisms to ensure smooth operation.
Caching Mechanism: Features intelligent caching to optimize performance and reduce redundant operations.

‚ÄãUsing CrewAI Tools
To enhance your agents‚Äô capabilities with crewAI tools, begin by installing our extra tools package:
pip install 'crewai[tools]'

Here‚Äôs an example demonstrating their use:
Codeimport os
from crewai import Agent, Task, Crew
# Importing crewAI tools
from crewai_tools import (
    DirectoryReadTool,
    FileReadTool,
    SerperDevTool,
    WebsiteSearchTool
)

# Set up API keys
os.environ["SERPER_API_KEY"] = "Your Key" # serper.dev API key
os.environ["OPENAI_API_KEY"] = "Your Key"

# Instantiate tools
docs_tool = DirectoryReadTool(directory='./blog-posts')
file_tool = FileReadTool()
search_tool = SerperDevTool()
web_rag_tool = WebsiteSearchTool()

# Create agents
researcher = Agent(
    role='Market Research Analyst',
    goal='Provide up-to-date market analysis of the AI industry',
    backstory='An expert analyst with a keen eye for market trends.',
    tools=[search_tool, web_rag_tool],
    verbose=True
)

writer = Agent(
    role='Content Writer',
    goal='Craft engaging blog posts about the AI industry',
    backstory='A skilled writer with a passion for technology.',
    tools=[docs_tool, file_tool],
    verbose=True
)

# Define tasks
research = Task(
    description='Research the latest trends in the AI industry and provide a summary.',
    expected_output='A summary of the top 3 trending developments in the AI industry with a unique perspective on their significance.',
    agent=researcher
)

write = Task(
    description='Write an engaging blog post about the AI industry, based on the research analyst‚Äôs summary. Draw inspiration from the latest blog posts in the directory.',
    expected_output='A 4-paragraph blog post formatted in markdown with engaging, informative, and accessible content, avoiding complex jargon.',
    agent=writer,
    output_file='blog-posts/new_post.md'  # The final blog post will be saved here
)

# Assemble a crew with planning enabled
crew = Crew(
    agents=[researcher, writer],
    tasks=[research, write],
    verbose=True,
    planning=True,  # Enable planning feature
)

# Execute tasks
crew.kickoff()

‚ÄãAvailable CrewAI Tools

Error Handling: All tools are built with error handling capabilities, allowing agents to gracefully manage exceptions and continue their tasks.
Caching Mechanism: All tools support caching, enabling agents to efficiently reuse previously obtained results, reducing the load on external resources and speeding up the execution time. You can also define finer control over the caching mechanism using the cache_function attribute on the tool.

Here is a list of the available tools and their descriptions:
ToolDescriptionBrowserbaseLoadToolA tool for interacting with and extracting data from web browsers.CodeDocsSearchToolA RAG tool optimized for searching through code documentation and related technical documents.CodeInterpreterToolA tool for interpreting python code.ComposioToolEnables use of Composio tools.CSVSearchToolA RAG tool designed for searching within CSV files, tailored to handle structured data.DALL-E ToolA tool for generating images using the DALL-E API.DirectorySearchToolA RAG tool for searching within directories, useful for navigating through file systems.DOCXSearchToolA RAG tool aimed at searching within DOCX documents, ideal for processing Word files.DirectoryReadToolFacilitates reading and processing of directory structures and their contents.EXASearchToolA tool designed for performing exhaustive searches across various data sources.FileReadToolEnables reading and extracting data from files, supporting various file formats.FirecrawlSearchToolA tool to search webpages using Firecrawl and return the results.FirecrawlCrawlWebsiteToolA tool for crawling webpages using Firecrawl.FirecrawlScrapeWebsiteToolA tool for scraping webpages URL using Firecrawl and returning its contents.GithubSearchToolA RAG tool for searching within GitHub repositories, useful for code and documentation search.SerperDevToolA specialized tool for development purposes, with specific functionalities under development.TXTSearchToolA RAG tool focused on searching within text (.txt) files, suitable for unstructured data.JSONSearchToolA RAG tool designed for searching within JSON files, catering to structured data handling.LlamaIndexToolEnables the use of LlamaIndex tools.MDXSearchToolA RAG tool tailored for searching within Markdown (MDX) files, useful for documentation.PDFSearchToolA RAG tool aimed at searching within PDF documents, ideal for processing scanned documents.PGSearchToolA RAG tool optimized for searching within PostgreSQL databases, suitable for database queries.Vision ToolA tool for generating images using the DALL-E API.RagToolA general-purpose RAG tool capable of handling various data sources and types.ScrapeElementFromWebsiteToolEnables scraping specific elements from websites, useful for targeted data extraction.ScrapeWebsiteToolFacilitates scraping entire websites, ideal for comprehensive data collection.WebsiteSearchToolA RAG tool for searching website content, optimized for web data extraction.XMLSearchToolA RAG tool designed for searching within XML files, suitable for structured data formats.YoutubeChannelSearchToolA RAG tool for searching within YouTube channels, useful for video content analysis.YoutubeVideoSearchToolA RAG tool aimed at searching within YouTube videos, ideal for video data extraction.
‚ÄãCreating your own Tools
Developers can craft custom tools tailored for their agent‚Äôs needs or utilize pre-built options.
To create your own CrewAI tools you will need to install our extra tools package:
pip install 'crewai[tools]'

Once you do that there are two main ways for one to create a CrewAI tool:
‚ÄãSubclassing BaseTool
Codefrom crewai_tools import BaseTool

class MyCustomTool(BaseTool):
    name: str = "Name of my tool"
    description: str = "Clear description for what this tool is useful for, your agent will need this information to use it."

    def _run(self, argument: str) -> str:
        # Implementation goes here
        return "Result from custom tool"

‚ÄãUtilizing the tool Decorator
Codefrom crewai_tools import tool
@tool("Name of my tool")
def my_tool(question: str) -> str:
    """Clear description for what this tool is useful for, your agent will need this information to use it."""
    # Function logic here
    return "Result from your custom tool"

‚ÄãCustom Caching Mechanism
Tools can optionally implement a cache_function to fine-tune caching behavior. This function determines when to cache results based on specific conditions, offering granular control over caching logic.
Codefrom crewai_tools import tool

@tool
def multiplication_tool(first_number: int, second_number: int) -> str:
    """Useful for when you need to multiply two numbers together."""
    return first_number * second_number

def cache_func(args, result):
    # In this case, we only cache the result if it's a multiple of 2
    cache = result % 2 == 0
    return cache

multiplication_tool.cache_function = cache_func

writer1 = Agent(
        role="Writer",
        goal="You write lessons of math for kids.",
        backstory="You're an expert in writing and you love to teach kids but you know nothing of math.",
        tools=[multiplication_tool],
        allow_delegation=False,
    )
    #...

‚ÄãConclusion
Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.
When building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling,
caching mechanisms, and the flexibility of tool arguments to optimize your agents‚Äô performance and capabilities.Was this page helpful?YesNoCLIUsing LangChain ToolswebsitexgithublinkedinyoutubePowered by MintlifyOn this pageIntroductionWhat is a Tool?Key Characteristics of ToolsUsing CrewAI ToolsAvailable CrewAI ToolsCreating your own ToolsSubclassing BaseToolUtilizing the tool DecoratorCustom Caching MechanismConclusion

Page: https://docs.crewai.com/concepts/langchain-tools

Using LangChain Tools - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationCore ConceptsUsing LangChain ToolsGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryCore ConceptsUsing LangChain ToolsLearn how to integrate LangChain tools with CrewAI agents to enhance search-based queries and more.‚ÄãUsing LangChain Tools
CrewAI seamlessly integrates with LangChain‚Äôs comprehensive list of tools, all of which can be used with CrewAI.
Codeimport os
from crewai import Agent
from langchain.agents import Tool
from langchain.utilities import GoogleSerperAPIWrapper

# Setup API keys
os.environ["SERPER_API_KEY"] = "Your Key"

search = GoogleSerperAPIWrapper()

# Create and assign the search tool to an agent
serper_tool = Tool(
  name="Intermediate Answer",
  func=search.run,
  description="Useful for search-based queries",
)

agent = Agent(
  role='Research Analyst',
  goal='Provide up-to-date market analysis',
  backstory='An expert analyst with a keen eye for market trends.',
  tools=[serper_tool]
)

# rest of the code ...

‚ÄãConclusion
Tools are pivotal in extending the capabilities of CrewAI agents, enabling them to undertake a broad spectrum of tasks and collaborate effectively.
When building solutions with CrewAI, leverage both custom and existing tools to empower your agents and enhance the AI ecosystem. Consider utilizing error handling, caching mechanisms,
and the flexibility of tool arguments to optimize your agents‚Äô performance and capabilities.Was this page helpful?YesNoToolsUsing LlamaIndex ToolswebsitexgithublinkedinyoutubePowered by MintlifyOn this pageUsing LangChain ToolsConclusion

Page: https://docs.crewai.com/concepts/llamaindex-tools

Using LlamaIndex Tools - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationCore ConceptsUsing LlamaIndex ToolsGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryCore ConceptsUsing LlamaIndex ToolsLearn how to integrate LlamaIndex tools with CrewAI agents to enhance search-based queries and more.‚ÄãUsing LlamaIndex Tools
CrewAI seamlessly integrates with LlamaIndex‚Äôs comprehensive toolkit for RAG (Retrieval-Augmented Generation) and agentic pipelines, enabling advanced search-based queries and more.
Here are the available built-in tools offered by LlamaIndex.
Codefrom crewai import Agent
from crewai_tools import LlamaIndexTool

# Example 1: Initialize from FunctionTool
from llama_index.core.tools import FunctionTool

your_python_function = lambda ...: ...
og_tool = FunctionTool.from_defaults(
    your_python_function, 
    name="<name>", 
    description='<description>'
)
tool = LlamaIndexTool.from_tool(og_tool)

# Example 2: Initialize from LlamaHub Tools
from llama_index.tools.wolfram_alpha import WolframAlphaToolSpec
wolfram_spec = WolframAlphaToolSpec(app_id="<app_id>")
wolfram_tools = wolfram_spec.to_tool_list()
tools = [LlamaIndexTool.from_tool(t) for t in wolfram_tools]

# Example 3: Initialize Tool from a LlamaIndex Query Engine
query_engine = index.as_query_engine()
query_tool = LlamaIndexTool.from_query_engine(
    query_engine,
    name="Uber 2019 10K Query Tool",
    description="Use this tool to lookup the 2019 Uber 10K Annual Report"
)

# Create and assign the tools to an agent
agent = Agent(
    role='Research Analyst',
    goal='Provide up-to-date market analysis',
    backstory='An expert analyst with a keen eye for market trends.',
    tools=[tool, *tools, query_tool]
)

# rest of the code ...

‚ÄãSteps to Get Started
To effectively use the LlamaIndexTool, follow these steps:
1Package InstallationMake sure that crewai[tools] package is installed in your Python environment:2Install and Use LlamaIndexFollow the LlamaIndex documentation LlamaIndex Documentation to set up a RAG/agent pipeline.Was this page helpful?YesNoUsing LangChain ToolsCreate Custom ToolswebsitexgithublinkedinyoutubePowered by MintlifyOn this pageUsing LlamaIndex ToolsSteps to Get Started

Page: https://docs.crewai.com/how-to/create-custom-tools

Create Custom Tools - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationHow to GuidesCreate Custom ToolsGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryHow to GuidesCreate Custom ToolsComprehensive guide on crafting, using, and managing custom tools within the CrewAI framework, including new functionalities and error handling.‚ÄãCreating and Utilizing Tools in CrewAI
This guide provides detailed instructions on creating custom tools for the CrewAI framework and how to efficiently manage and utilize these tools,
incorporating the latest functionalities such as tool delegation, error handling, and dynamic tool calling. It also highlights the importance of collaboration tools,
enabling agents to perform a wide range of actions.
‚ÄãPrerequisites
Before creating your own tools, ensure you have the crewAI extra tools package installed:
pip install 'crewai[tools]'

‚ÄãSubclassing BaseTool
To create a personalized tool, inherit from BaseTool and define the necessary attributes and the _run method.
Codefrom crewai_tools import BaseTool

class MyCustomTool(BaseTool):
    name: str = "Name of my tool"
    description: str = "What this tool does. It's vital for effective utilization."

    def _run(self, argument: str) -> str:
        # Your tool's logic here
        return "Tool's result"

‚ÄãUsing the tool Decorator
Alternatively, you can use the tool decorator @tool. This approach allows you to define the tool‚Äôs attributes and functionality directly within a function,
offering a concise and efficient way to create specialized tools tailored to your needs.
Codefrom crewai_tools import tool

@tool("Tool Name")
def my_simple_tool(question: str) -> str:
    """Tool description for clarity."""
    # Tool logic here
    return "Tool output"

‚ÄãDefining a Cache Function for the Tool
To optimize tool performance with caching, define custom caching strategies using the cache_function attribute.
Code@tool("Tool with Caching")
def cached_tool(argument: str) -> str:
    """Tool functionality description."""
    return "Cacheable result"

def my_cache_strategy(arguments: dict, result: str) -> bool:
    # Define custom caching logic
    return True if some_condition else False

cached_tool.cache_function = my_cache_strategy

By adhering to these guidelines and incorporating new functionalities and collaboration tools into your tool creation and management processes,
you can leverage the full capabilities of the CrewAI framework, enhancing both the development experience and the efficiency of your AI agents.Was this page helpful?YesNoUsing LlamaIndex ToolsSequential ProcesseswebsitexgithublinkedinyoutubePowered by MintlifyOn this pageCreating and Utilizing Tools in CrewAIPrerequisitesSubclassing BaseToolUsing the tool DecoratorDefining a Cache Function for the Tool

Page: https://docs.crewai.com/how-to/sequential-process

Sequential Processes - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationHow to GuidesSequential ProcessesGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryHow to GuidesSequential ProcessesA comprehensive guide to utilizing the sequential processes for task execution in CrewAI projects.‚ÄãIntroduction
CrewAI offers a flexible framework for executing tasks in a structured manner, supporting both sequential and hierarchical processes.
This guide outlines how to effectively implement these processes to ensure efficient task execution and project completion.
‚ÄãSequential Process Overview
The sequential process ensures tasks are executed one after the other, following a linear progression.
This approach is ideal for projects requiring tasks to be completed in a specific order.
‚ÄãKey Features

Linear Task Flow: Ensures orderly progression by handling tasks in a predetermined sequence.
Simplicity: Best suited for projects with clear, step-by-step tasks.
Easy Monitoring: Facilitates easy tracking of task completion and project progress.

‚ÄãImplementing the Sequential Process
To use the sequential process, assemble your crew and define tasks in the order they need to be executed.
Codefrom crewai import Crew, Process, Agent, Task, TaskOutput, CrewOutput

# Define your agents
researcher = Agent(
  role='Researcher',
  goal='Conduct foundational research',
  backstory='An experienced researcher with a passion for uncovering insights'
)
analyst = Agent(
  role='Data Analyst',
  goal='Analyze research findings',
  backstory='A meticulous analyst with a knack for uncovering patterns'
)
writer = Agent(
  role='Writer',
  goal='Draft the final report',
  backstory='A skilled writer with a talent for crafting compelling narratives'
)

# Define your tasks
research_task = Task(
  description='Gather relevant data...', 
  agent=researcher, 
  expected_output='Raw Data'
)
analysis_task = Task(
  description='Analyze the data...', 
  agent=analyst, 
  expected_output='Data Insights'
)
writing_task = Task(
  description='Compose the report...', 
  agent=writer, 
  expected_output='Final Report'
)

# Form the crew with a sequential process
report_crew = Crew(
  agents=[researcher, analyst, writer],
  tasks=[research_task, analysis_task, writing_task],
  process=Process.sequential
)

# Execute the crew
result = report_crew.kickoff()

# Accessing the type-safe output
task_output: TaskOutput = result.tasks[0].output
crew_output: CrewOutput = result.output

‚ÄãNote:
Each task in a sequential process must have an agent assigned. Ensure that every Task includes an agent parameter.
‚ÄãWorkflow in Action

Initial Task: In a sequential process, the first agent completes their task and signals completion.
Subsequent Tasks: Agents pick up their tasks based on the process type, with outcomes of preceding tasks or directives guiding their execution.
Completion: The process concludes once the final task is executed, leading to project completion.

‚ÄãAdvanced Features
‚ÄãTask Delegation
In sequential processes, if an agent has allow_delegation set to True, they can delegate tasks to other agents in the crew.
This feature is automatically set up when there are multiple agents in the crew.
‚ÄãAsynchronous Execution
Tasks can be executed asynchronously, allowing for parallel processing when appropriate.
To create an asynchronous task, set async_execution=True when defining the task.
‚ÄãMemory and Caching
CrewAI supports both memory and caching features:

Memory: Enable by setting memory=True when creating the Crew. This allows agents to retain information across tasks.
Caching: By default, caching is enabled. Set cache=False to disable it.

‚ÄãCallbacks
You can set callbacks at both the task and step level:

task_callback: Executed after each task completion.
step_callback: Executed after each step in an agent‚Äôs execution.

‚ÄãUsage Metrics
CrewAI tracks token usage across all tasks and agents. You can access these metrics after execution.
‚ÄãBest Practices for Sequential Processes

Order Matters: Arrange tasks in a logical sequence where each task builds upon the previous one.
Clear Task Descriptions: Provide detailed descriptions for each task to guide the agents effectively.
Appropriate Agent Selection: Match agents‚Äô skills and roles to the requirements of each task.
Use Context: Leverage the context from previous tasks to inform subsequent ones.

This updated documentation ensures that details accurately reflect the latest changes in the codebase and clearly describes how to leverage new features and configurations.
The content is kept simple and direct to ensure easy understanding.Was this page helpful?YesNoCreate Custom ToolsHierarchical ProcesswebsitexgithublinkedinyoutubePowered by MintlifyOn this pageIntroductionSequential Process OverviewKey FeaturesImplementing the Sequential ProcessNote:Workflow in ActionAdvanced FeaturesTask DelegationAsynchronous ExecutionMemory and CachingCallbacksUsage MetricsBest Practices for Sequential Processes

Page: https://docs.crewai.com/how-to/hierarchical-process

Hierarchical Process - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationHow to GuidesHierarchical ProcessGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryHow to GuidesHierarchical ProcessA comprehensive guide to understanding and applying the hierarchical process within your CrewAI projects, updated to reflect the latest coding practices and functionalities.‚ÄãIntroduction
The hierarchical process in CrewAI introduces a structured approach to task management, simulating traditional organizational hierarchies for efficient task delegation and execution.
This systematic workflow enhances project outcomes by ensuring tasks are handled with optimal efficiency and accuracy.
The hierarchical process is designed to leverage advanced models like GPT-4, optimizing token usage while handling complex tasks with greater efficiency.
‚ÄãHierarchical Process Overview
By default, tasks in CrewAI are managed through a sequential process. However, adopting a hierarchical approach allows for a clear hierarchy in task management,
where a ‚Äòmanager‚Äô agent coordinates the workflow, delegates tasks, and validates outcomes for streamlined and effective execution. This manager agent can now be either
automatically created by CrewAI or explicitly set by the user.
‚ÄãKey Features

Task Delegation: A manager agent allocates tasks among crew members based on their roles and capabilities.
Result Validation: The manager evaluates outcomes to ensure they meet the required standards.
Efficient Workflow: Emulates corporate structures, providing an organized approach to task management.
System Prompt Handling: Optionally specify whether the system should use predefined prompts.
Stop Words Control: Optionally specify whether stop words should be used, supporting various models including the o1 models.
Context Window Respect: Prioritize important context by enabling respect of the context window, which is now the default behavior.
Delegation Control: Delegation is now disabled by default to give users explicit control.
Max Requests Per Minute: Configurable option to set the maximum number of requests per minute.
Max Iterations: Limit the maximum number of iterations for obtaining a final answer.

‚ÄãImplementing the Hierarchical Process
To utilize the hierarchical process, it‚Äôs essential to explicitly set the process attribute to Process.hierarchical, as the default behavior is Process.sequential.
Define a crew with a designated manager and establish a clear chain of command.
Assign tools at the agent level to facilitate task delegation and execution by the designated agents under the manager‚Äôs guidance.
Tools can also be specified at the task level for precise control over tool availability during task execution.
Configuring the manager_llm parameter is crucial for the hierarchical process.
The system requires a manager LLM to be set up for proper function, ensuring tailored decision-making.
Codefrom langchain_openai import ChatOpenAI
from crewai import Crew, Process, Agent

# Agents are defined with attributes for backstory, cache, and verbose mode
researcher = Agent(
    role='Researcher',
    goal='Conduct in-depth analysis',
    backstory='Experienced data analyst with a knack for uncovering hidden trends.',
    cache=True,
    verbose=False,
    # tools=[]  # This can be optionally specified; defaults to an empty list
    use_system_prompt=True,  # Enable or disable system prompts for this agent
    max_rpm=30,  # Limit on the number of requests per minute
    max_iter=5  # Maximum number of iterations for a final answer
)
writer = Agent(
    role='Writer',
    goal='Create engaging content',
    backstory='Creative writer passionate about storytelling in technical domains.',
    cache=True,
    verbose=False,
    # tools=[]  # Optionally specify tools; defaults to an empty list
    use_system_prompt=True,  # Enable or disable system prompts for this agent
    max_rpm=30,  # Limit on the number of requests per minute
    max_iter=5  # Maximum number of iterations for a final answer
)

# Establishing the crew with a hierarchical process and additional configurations
project_crew = Crew(
    tasks=[...],  # Tasks to be delegated and executed under the manager's supervision
    agents=[researcher, writer],
    manager_llm=ChatOpenAI(temperature=0, model="gpt-4"),  # Mandatory if manager_agent is not set
    process=Process.hierarchical,  # Specifies the hierarchical management approach
    respect_context_window=True,  # Enable respect of the context window for tasks
    memory=True,  # Enable memory usage for enhanced task execution
    manager_agent=None,  # Optional: explicitly set a specific agent as manager instead of the manager_llm
    planning=True,  # Enable planning feature for pre-execution strategy
)

‚ÄãWorkflow in Action

Task Assignment: The manager assigns tasks strategically, considering each agent‚Äôs capabilities and available tools.
Execution and Review: Agents complete their tasks with the option for asynchronous execution and callback functions for streamlined workflows.
Sequential Task Progression: Despite being a hierarchical process, tasks follow a logical order for smooth progression, facilitated by the manager‚Äôs oversight.

‚ÄãConclusion
Adopting the hierarchical process in CrewAI, with the correct configurations and understanding of the system‚Äôs capabilities, facilitates an organized and efficient approach to project management.
Utilize the advanced features and customizations to tailor the workflow to your specific needs, ensuring optimal task execution and project success.Was this page helpful?YesNoSequential ProcessesCreate Your Own Manager AgentwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageIntroductionHierarchical Process OverviewKey FeaturesImplementing the Hierarchical ProcessWorkflow in ActionConclusion

Page: https://docs.crewai.com/how-to/custom-manager-agent

Create Your Own Manager Agent - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationHow to GuidesCreate Your Own Manager AgentGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryHow to GuidesCreate Your Own Manager AgentLearn how to set a custom agent as the manager in CrewAI, providing more control over task management and coordination.‚ÄãSetting a Specific Agent as Manager in CrewAI
CrewAI allows users to set a specific agent as the manager of the crew, providing more control over the management and coordination of tasks.
This feature enables the customization of the managerial role to better fit your project‚Äôs requirements.
‚ÄãUsing the manager_agent Attribute
‚ÄãCustom Manager Agent
The manager_agent attribute allows you to define a custom agent to manage the crew. This agent will oversee the entire process, ensuring that tasks are completed efficiently and to the highest standard.
‚ÄãExample
Codeimport os
from crewai import Agent, Task, Crew, Process

# Define your agents
researcher = Agent(
    role="Researcher",
    goal="Conduct thorough research and analysis on AI and AI agents",
    backstory="You're an expert researcher, specialized in technology, software engineering, AI, and startups. You work as a freelancer and are currently researching for a new client.",
    allow_delegation=False,
)

writer = Agent(
    role="Senior Writer",
    goal="Create compelling content about AI and AI agents",
    backstory="You're a senior writer, specialized in technology, software engineering, AI, and startups. You work as a freelancer and are currently writing content for a new client.",
    allow_delegation=False,
)

# Define your task
task = Task(
    description="Generate a list of 5 interesting ideas for an article, then write one captivating paragraph for each idea that showcases the potential of a full article on this topic. Return the list of ideas with their paragraphs and your notes.",
    expected_output="5 bullet points, each with a paragraph and accompanying notes.",
)

# Define the manager agent
manager = Agent(
    role="Project Manager",
    goal="Efficiently manage the crew and ensure high-quality task completion",
    backstory="You're an experienced project manager, skilled in overseeing complex projects and guiding teams to success. Your role is to coordinate the efforts of the crew members, ensuring that each task is completed on time and to the highest standard.",
    allow_delegation=True,
)

# Instantiate your crew with a custom manager
crew = Crew(
    agents=[researcher, writer],
    tasks=[task],
    manager_agent=manager,
    process=Process.hierarchical,
)

# Start the crew's work
result = crew.kickoff()

‚ÄãBenefits of a Custom Manager Agent

Enhanced Control: Tailor the management approach to fit the specific needs of your project.
Improved Coordination: Ensure efficient task coordination and management by an experienced agent.
Customizable Management: Define managerial roles and responsibilities that align with your project‚Äôs goals.

‚ÄãSetting a Manager LLM
If you‚Äôre using the hierarchical process and don‚Äôt want to set a custom manager agent, you can specify the language model for the manager:
Codefrom langchain_openai import ChatOpenAI

manager_llm = ChatOpenAI(model_name="gpt-4")

crew = Crew(
    agents=[researcher, writer],
    tasks=[task],
    process=Process.hierarchical,
    manager_llm=manager_llm
)

Either manager_agent or manager_llm must be set when using the hierarchical process.Was this page helpful?YesNoHierarchical ProcessConnect to any LLMwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageSetting a Specific Agent as Manager in CrewAIUsing the manager_agent AttributeCustom Manager AgentExampleBenefits of a Custom Manager AgentSetting a Manager LLM

Page: https://docs.crewai.com/how-to/llm-connections

Connect to any LLM - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationHow to GuidesConnect to any LLMGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryHow to GuidesConnect to any LLMComprehensive guide on integrating CrewAI with various Large Language Models (LLMs) using LiteLLM, including supported providers and configuration options.‚ÄãConnect CrewAI to LLMs
CrewAI uses LiteLLM to connect to a wide variety of Language Models (LLMs). This integration provides extensive versatility, allowing you to use models from numerous providers with a simple, unified interface.
By default, CrewAI uses the gpt-4o-mini model. This is determined by the OPENAI_MODEL_NAME environment variable, which defaults to ‚Äúgpt-4o-mini‚Äù if not set.
You can easily configure your agents to use a different model or provider as described in this guide.
‚ÄãSupported Providers
LiteLLM supports a wide range of providers, including but not limited to:

OpenAI
Anthropic
Google (Vertex AI, Gemini)
Azure OpenAI
AWS (Bedrock, SageMaker)
Cohere
Hugging Face
Ollama
Mistral AI
Replicate
Together AI
AI21
Cloudflare Workers AI
DeepInfra
Groq
And many more!

For a complete and up-to-date list of supported providers, please refer to the LiteLLM Providers documentation.
‚ÄãChanging the LLM
To use a different LLM with your CrewAI agents, you have several options:
Using a String IdentifierUsing the LLM ClassPass the model name as a string when initializing the agent:
‚ÄãConfiguration Options
When configuring an LLM for your agent, you have access to a wide range of parameters:
ParameterTypeDescriptionmodelstrThe name of the model to use (e.g., ‚Äúgpt-4‚Äù, ‚Äúclaude-2‚Äù)temperaturefloatControls randomness in output (0.0 to 1.0)max_tokensintMaximum number of tokens to generatetop_pfloatControls diversity of output (0.0 to 1.0)frequency_penaltyfloatPenalizes new tokens based on their frequency in the text so farpresence_penaltyfloatPenalizes new tokens based on their presence in the text so farstopstr, List[str]Sequence(s) to stop generationbase_urlstrThe base URL for the API endpointapi_keystrYour API key for authentication
For a complete list of parameters and their descriptions, refer to the LLM class documentation.
‚ÄãConnecting to OpenAI-Compatible LLMs
You can connect to OpenAI-compatible LLMs using either environment variables or by setting specific attributes on the LLM class:
Using Environment VariablesUsing LLM Class Attributes
‚ÄãUsing Local Models with Ollama
For local models like those provided by Ollama:
1Download and install OllamaClick here to download and install Ollama2Pull the desired modelFor example, run ollama pull llama3.2 to download the model.3Configure your agent
‚ÄãChanging the Base API URL
You can change the base API URL for any LLM provider by setting the base_url parameter:
Code  llm = LLM(
    model="custom-model-name",
    base_url="https://api.your-provider.com/v1",
    api_key="your-api-key"
)
agent = Agent(llm=llm, ...)

This is particularly useful when working with OpenAI-compatible APIs or when you need to specify a different endpoint for your chosen provider.
‚ÄãConclusion
By leveraging LiteLLM, CrewAI offers seamless integration with a vast array of LLMs. This flexibility allows you to choose the most suitable model for your specific needs, whether you prioritize performance, cost-efficiency, or local deployment. Remember to consult the LiteLLM documentation for the most up-to-date information on supported models and configuration options.Was this page helpful?YesNoCreate Your Own Manager AgentCustomize AgentswebsitexgithublinkedinyoutubePowered by MintlifyOn this pageConnect CrewAI to LLMsSupported ProvidersChanging the LLMConfiguration OptionsConnecting to OpenAI-Compatible LLMsUsing Local Models with OllamaChanging the Base API URLConclusion

Page: https://docs.crewai.com/how-to/customizing-agents

Customize Agents - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationHow to GuidesCustomize AgentsGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryHow to GuidesCustomize AgentsA comprehensive guide to tailoring agents for specific roles, tasks, and advanced customizations within the CrewAI framework.‚ÄãCustomizable Attributes
Crafting an efficient CrewAI team hinges on the ability to dynamically tailor your AI agents to meet the unique requirements of any project. This section covers the foundational attributes you can customize.
‚ÄãKey Attributes for Customization
AttributeDescriptionRoleSpecifies the agent‚Äôs job within the crew, such as ‚ÄòAnalyst‚Äô or ‚ÄòCustomer Service Rep‚Äô.GoalDefines the agent‚Äôs objectives, aligned with its role and the crew‚Äôs overarching mission.BackstoryProvides depth to the agent‚Äôs persona, enhancing motivations and engagements within the crew.Tools (Optional)Represents the capabilities or methods the agent uses for tasks, from simple functions to complex integrations.Cache (Optional)Determines if the agent should use a cache for tool usage.Max RPMSets the maximum requests per minute (max_rpm). Can be set to None for unlimited requests to external services.Verbose (Optional)Enables detailed logging for debugging and optimization, providing insights into execution processes.Allow Delegation (Optional)Controls task delegation to other agents, default is False.Max Iter (Optional)Limits the maximum number of iterations (max_iter) for a task to prevent infinite loops, with a default of 25.Max Execution Time (Optional)Sets the maximum time allowed for an agent to complete a task.System Template (Optional)Defines the system format for the agent.Prompt Template (Optional)Defines the prompt format for the agent.Response Template (Optional)Defines the response format for the agent.Use System Prompt (Optional)Controls whether the agent will use a system prompt during task execution.Respect Context WindowEnables a sliding context window by default, maintaining context size.Max Retry LimitSets the maximum number of retries (max_retry_limit) for an agent in case of errors.
‚ÄãAdvanced Customization Options
Beyond the basic attributes, CrewAI allows for deeper customization to enhance an agent‚Äôs behavior and capabilities significantly.
‚ÄãLanguage Model Customization
Agents can be customized with specific language models (llm) and function-calling language models (function_calling_llm), offering advanced control over their processing and decision-making abilities.
It‚Äôs important to note that setting the function_calling_llm allows for overriding the default crew function-calling language model, providing a greater degree of customization.
‚ÄãPerformance and Debugging Settings
Adjusting an agent‚Äôs performance and monitoring its operations are crucial for efficient task execution.
‚ÄãVerbose Mode and RPM Limit

Verbose Mode: Enables detailed logging of an agent‚Äôs actions, useful for debugging and optimization. Specifically, it provides insights into agent execution processes, aiding in the optimization of performance.
RPM Limit: Sets the maximum number of requests per minute (max_rpm). This attribute is optional and can be set to None for no limit, allowing for unlimited queries to external services if needed.

‚ÄãMaximum Iterations for Task Execution
The max_iter attribute allows users to define the maximum number of iterations an agent can perform for a single task, preventing infinite loops or excessively long executions.
The default value is set to 25, providing a balance between thoroughness and efficiency. Once the agent approaches this number, it will try its best to give a good answer.
‚ÄãCustomizing Agents and Tools
Agents are customized by defining their attributes and tools during initialization. Tools are critical for an agent‚Äôs functionality, enabling them to perform specialized tasks.
The tools attribute should be an array of tools the agent can utilize, and it‚Äôs initialized as an empty list by default. Tools can be added or modified post-agent initialization to adapt to new requirements.
pip install 'crewai[tools]'

‚ÄãExample: Assigning Tools to an Agent
Codeimport os
from crewai import Agent
from crewai_tools import SerperDevTool

# Set API keys for tool initialization
os.environ["OPENAI_API_KEY"] = "Your Key"
os.environ["SERPER_API_KEY"] = "Your Key"

# Initialize a search tool
search_tool = SerperDevTool()

# Initialize the agent with advanced options
agent = Agent(
  role='Research Analyst',
  goal='Provide up-to-date market analysis',
  backstory='An expert analyst with a keen eye for market trends.',
  tools=[search_tool],
  memory=True, # Enable memory
  verbose=True,
  max_rpm=None, # No limit on requests per minute
  max_iter=25, # Default value for maximum iterations
)

‚ÄãDelegation and Autonomy
Controlling an agent‚Äôs ability to delegate tasks or ask questions is vital for tailoring its autonomy and collaborative dynamics within the CrewAI framework. By default,
the allow_delegation attribute is now set to False, disabling agents to seek assistance or delegate tasks as needed. This default behavior can be changed to promote collaborative problem-solving and
efficiency within the CrewAI ecosystem. If needed, delegation can be enabled to suit specific operational requirements.
‚ÄãExample: Disabling Delegation for an Agent
Codeagent = Agent(
  role='Content Writer',
  goal='Write engaging content on market trends',
  backstory='A seasoned writer with expertise in market analysis.',
  allow_delegation=True # Enabling delegation
)

‚ÄãConclusion
Customizing agents in CrewAI by setting their roles, goals, backstories, and tools, alongside advanced options like language model customization, memory, performance settings, and delegation preferences,
equips a nuanced and capable AI team ready for complex challenges.Was this page helpful?YesNoConnect to any LLMCoding AgentswebsitexgithublinkedinyoutubePowered by MintlifyOn this pageCustomizable AttributesKey Attributes for CustomizationAdvanced Customization OptionsLanguage Model CustomizationPerformance and Debugging SettingsVerbose Mode and RPM LimitMaximum Iterations for Task ExecutionCustomizing Agents and ToolsExample: Assigning Tools to an AgentDelegation and AutonomyExample: Disabling Delegation for an AgentConclusion

Page: https://docs.crewai.com/how-to/coding-agents

Coding Agents - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationHow to GuidesCoding AgentsGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryHow to GuidesCoding AgentsLearn how to enable your CrewAI Agents to write and execute code, and explore advanced features for enhanced functionality.‚ÄãIntroduction
CrewAI Agents now have the powerful ability to write and execute code, significantly enhancing their problem-solving capabilities. This feature is particularly useful for tasks that require computational or programmatic solutions.
‚ÄãEnabling Code Execution
To enable code execution for an agent, set the allow_code_execution parameter to True when creating the agent.
Here‚Äôs an example:
Codefrom crewai import Agent

coding_agent = Agent(
    role="Senior Python Developer",
    goal="Craft well-designed and thought-out code",
    backstory="You are a senior Python developer with extensive experience in software architecture and best practices.",
    allow_code_execution=True
)

Note that allow_code_execution parameter defaults to False.
‚ÄãImportant Considerations


Model Selection: It is strongly recommended to use more capable models like Claude 3.5 Sonnet and GPT-4 when enabling code execution.
These models have a better understanding of programming concepts and are more likely to generate correct and efficient code.


Error Handling: The code execution feature includes error handling. If executed code raises an exception, the agent will receive the error message and can attempt to correct the code or
provide alternative solutions. The max_retry_limit parameter, which defaults to 2, controls the maximum number of retries for a task.


Dependencies: To use the code execution feature, you need to install the crewai_tools package. If not installed, the agent will log an info message:
‚ÄúCoding tools not available. Install crewai_tools.‚Äù


‚ÄãCode Execution Process
When an agent with code execution enabled encounters a task requiring programming:
1Task AnalysisThe agent analyzes the task and determines that code execution is necessary.2Code FormulationIt formulates the Python code needed to solve the problem.3Code ExecutionThe code is sent to the internal code execution tool (CodeInterpreterTool).4Result InterpretationThe agent interprets the result and incorporates it into its response or uses it for further problem-solving.
‚ÄãExample Usage
Here‚Äôs a detailed example of creating an agent with code execution capabilities and using it in a task:
Codefrom crewai import Agent, Task, Crew

# Create an agent with code execution enabled
coding_agent = Agent(
    role="Python Data Analyst",
    goal="Analyze data and provide insights using Python",
    backstory="You are an experienced data analyst with strong Python skills.",
    allow_code_execution=True
)

# Create a task that requires code execution
data_analysis_task = Task(
    description="Analyze the given dataset and calculate the average age of participants.",
    agent=coding_agent
)

# Create a crew and add the task
analysis_crew = Crew(
    agents=[coding_agent],
    tasks=[data_analysis_task]
)

# Execute the crew
result = analysis_crew.kickoff()

print(result)

In this example, the coding_agent can write and execute Python code to perform data analysis tasks.Was this page helpful?YesNoCustomize AgentsForce Tool Output as ResultwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageIntroductionEnabling Code ExecutionImportant ConsiderationsCode Execution ProcessExample Usage

Page: https://docs.crewai.com/how-to/force-tool-output-as-result

Force Tool Output as Result - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationHow to GuidesForce Tool Output as ResultGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryHow to GuidesForce Tool Output as ResultLearn how to force tool output as the result in an Agent‚Äôs task in CrewAI.‚ÄãIntroduction
In CrewAI, you can force the output of a tool as the result of an agent‚Äôs task.
This feature is useful when you want to ensure that the tool output is captured and returned as the task result, avoiding any agent modification during the task execution.
‚ÄãForcing Tool Output as Result
To force the tool output as the result of an agent‚Äôs task, you need to set the result_as_answer parameter to True when adding a tool to the agent.
This parameter ensures that the tool output is captured and returned as the task result, without any modifications by the agent.
Here‚Äôs an example of how to force the tool output as the result of an agent‚Äôs task:
Codefrom crewai.agent import Agent
from my_tool import MyCustomTool

# Create a coding agent with the custom tool
coding_agent = Agent(
        role="Data Scientist",
        goal="Produce amazing reports on AI",
        backstory="You work with data and AI",
        tools=[MyCustomTool(result_as_answer=True)],
    )

# Assuming the tool's execution and result population occurs within the system
task_result = coding_agent.execute_task(task)

‚ÄãWorkflow in Action
1Task ExecutionThe agent executes the task using the tool provided.2Tool OutputThe tool generates the output, which is captured as the task result.3Agent InteractionThe agent may reflect and take learnings from the tool but the output is not modified.4Result ReturnThe tool output is returned as the task result without any modifications.Was this page helpful?YesNoCoding AgentsHuman Input on ExecutionwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageIntroductionForcing Tool Output as ResultWorkflow in Action

Page: https://docs.crewai.com/how-to/human-input-on-execution

Human Input on Execution - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationHow to GuidesHuman Input on ExecutionGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryHow to GuidesHuman Input on ExecutionIntegrating CrewAI with human input during execution in complex decision-making processes and leveraging the full capabilities of the agent‚Äôs attributes and tools.‚ÄãHuman input in agent execution
Human input is critical in several agent execution scenarios, allowing agents to request additional information or clarification when necessary.
This feature is especially useful in complex decision-making processes or when agents require more details to complete a task effectively.
‚ÄãUsing human input with CrewAI
To integrate human input into agent execution, set the human_input flag in the task definition. When enabled, the agent prompts the user for input before delivering its final answer.
This input can provide extra context, clarify ambiguities, or validate the agent‚Äôs output.
‚ÄãExample:
pip install crewai

Codeimport os
from crewai import Agent, Task, Crew
from crewai_tools import SerperDevTool

os.environ["SERPER_API_KEY"] = "Your Key"  # serper.dev API key
os.environ["OPENAI_API_KEY"] = "Your Key"

# Loading Tools
search_tool = SerperDevTool()

# Define your agents with roles, goals, tools, and additional attributes
researcher = Agent(
    role='Senior Research Analyst',
    goal='Uncover cutting-edge developments in AI and data science',
    backstory=(
        "You are a Senior Research Analyst at a leading tech think tank. "
        "Your expertise lies in identifying emerging trends and technologies in AI and data science. "
        "You have a knack for dissecting complex data and presenting actionable insights."
    ),
    verbose=True,
    allow_delegation=False,
    tools=[search_tool]
)
writer = Agent(
    role='Tech Content Strategist',
    goal='Craft compelling content on tech advancements',
    backstory=(
        "You are a renowned Tech Content Strategist, known for your insightful and engaging articles on technology and innovation. "
        "With a deep understanding of the tech industry, you transform complex concepts into compelling narratives."
    ),
    verbose=True,
    allow_delegation=True,
    tools=[search_tool],
    cache=False,  # Disable cache for this agent
)

# Create tasks for your agents
task1 = Task(
    description=(
        "Conduct a comprehensive analysis of the latest advancements in AI in 2024. "
        "Identify key trends, breakthrough technologies, and potential industry impacts. "
        "Compile your findings in a detailed report. "
        "Make sure to check with a human if the draft is good before finalizing your answer."
    ),
    expected_output='A comprehensive full report on the latest AI advancements in 2024, leave nothing out',
    agent=researcher,
    human_input=True
)

task2 = Task(
    description=(
        "Using the insights from the researcher\'s report, develop an engaging blog post that highlights the most significant AI advancements. "
        "Your post should be informative yet accessible, catering to a tech-savvy audience. "
        "Aim for a narrative that captures the essence of these breakthroughs and their implications for the future."
    ),
    expected_output='A compelling 3 paragraphs blog post formatted as markdown about the latest AI advancements in 2024',
    agent=writer,
    human_input=True
)

# Instantiate your crew with a sequential process
crew = Crew(
    agents=[researcher, writer],
    tasks=[task1, task2],
    verbose=True,
    memory=True,
    planning=True  # Enable planning feature for the crew
)

# Get your crew to work!
result = crew.kickoff()

print("######################")
print(result)
Was this page helpful?YesNoForce Tool Output as ResultKickoff Crew AsynchronouslywebsitexgithublinkedinyoutubePowered by MintlifyOn this pageHuman input in agent executionUsing human input with CrewAIExample:

Page: https://docs.crewai.com/how-to/kickoff-async

Kickoff Crew Asynchronously - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationHow to GuidesKickoff Crew AsynchronouslyGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryHow to GuidesKickoff Crew AsynchronouslyKickoff a Crew Asynchronously‚ÄãIntroduction
CrewAI provides the ability to kickoff a crew asynchronously, allowing you to start the crew execution in a non-blocking manner.
This feature is particularly useful when you want to run multiple crews concurrently or when you need to perform other tasks while the crew is executing.
‚ÄãAsynchronous Crew Execution
To kickoff a crew asynchronously, use the kickoff_async() method. This method initiates the crew execution in a separate thread, allowing the main thread to continue executing other tasks.
‚ÄãMethod Signature
Codedef kickoff_async(self, inputs: dict) -> CrewOutput:

‚ÄãParameters

inputs (dict): A dictionary containing the input data required for the tasks.

‚ÄãReturns

CrewOutput: An object representing the result of the crew execution.

‚ÄãPotential Use Cases


Parallel Content Generation: Kickoff multiple independent crews asynchronously, each responsible for generating content on different topics. For example, one crew might research and draft an article on AI trends, while another crew generates social media posts about a new product launch. Each crew operates independently, allowing content production to scale efficiently.


Concurrent Market Research Tasks: Launch multiple crews asynchronously to conduct market research in parallel. One crew might analyze industry trends, while another examines competitor strategies, and yet another evaluates consumer sentiment. Each crew independently completes its task, enabling faster and more comprehensive insights.


Independent Travel Planning Modules: Execute separate crews to independently plan different aspects of a trip. One crew might handle flight options, another handles accommodation, and a third plans activities. Each crew works asynchronously, allowing various components of the trip to be planned simultaneously and independently for faster results.


‚ÄãExample: Single Asynchronous Crew Execution
Here‚Äôs an example of how to kickoff a crew asynchronously using asyncio and awaiting the result:
Codeimport asyncio
from crewai import Crew, Agent, Task

# Create an agent with code execution enabled
coding_agent = Agent(
    role="Python Data Analyst",
    goal="Analyze data and provide insights using Python",
    backstory="You are an experienced data analyst with strong Python skills.",
    allow_code_execution=True
)

# Create a task that requires code execution
data_analysis_task = Task(
    description="Analyze the given dataset and calculate the average age of participants. Ages: {ages}",
    agent=coding_agent
)

# Create a crew and add the task
analysis_crew = Crew(
    agents=[coding_agent],
    tasks=[data_analysis_task]
)

# Async function to kickoff the crew asynchronously
async def async_crew_execution():
    result = await analysis_crew.kickoff_async(inputs={"ages": [25, 30, 35, 40, 45]})
    print("Crew Result:", result)

# Run the async function
asyncio.run(async_crew_execution())

‚ÄãExample: Multiple Asynchronous Crew Executions
In this example, we‚Äôll show how to kickoff multiple crews asynchronously and wait for all of them to complete using asyncio.gather():
Codeimport asyncio
from crewai import Crew, Agent, Task

# Create an agent with code execution enabled
coding_agent = Agent(
    role="Python Data Analyst",
    goal="Analyze data and provide insights using Python",
    backstory="You are an experienced data analyst with strong Python skills.",
    allow_code_execution=True
)

# Create tasks that require code execution
task_1 = Task(
    description="Analyze the first dataset and calculate the average age of participants. Ages: {ages}",
    agent=coding_agent
)

task_2 = Task(
    description="Analyze the second dataset and calculate the average age of participants. Ages: {ages}",
    agent=coding_agent
)

# Create two crews and add tasks
crew_1 = Crew(agents=[coding_agent], tasks=[task_1])
crew_2 = Crew(agents=[coding_agent], tasks=[task_2])

# Async function to kickoff multiple crews asynchronously and wait for all to finish
async def async_multiple_crews():
    result_1 = crew_1.kickoff_async(inputs={"ages": [25, 30, 35, 40, 45]})
    result_2 = crew_2.kickoff_async(inputs={"ages": [20, 22, 24, 28, 30]})

    # Wait for both crews to finish
    results = await asyncio.gather(result_1, result_2)

    for i, result in enumerate(results, 1):
        print(f"Crew {i} Result:", result)

# Run the async function
asyncio.run(async_multiple_crews())
Was this page helpful?YesNoHuman Input on ExecutionKickoff Crew for EachwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageIntroductionAsynchronous Crew ExecutionMethod SignatureParametersReturnsPotential Use CasesExample: Single Asynchronous Crew ExecutionExample: Multiple Asynchronous Crew Executions

Page: https://docs.crewai.com/how-to/kickoff-for-each

Kickoff Crew for Each - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationHow to GuidesKickoff Crew for EachGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryHow to GuidesKickoff Crew for EachKickoff Crew for Each Item in a List‚ÄãIntroduction
CrewAI provides the ability to kickoff a crew for each item in a list, allowing you to execute the crew for each item in the list.
This feature is particularly useful when you need to perform the same set of tasks for multiple items.
‚ÄãKicking Off a Crew for Each Item
To kickoff a crew for each item in a list, use the kickoff_for_each() method.
This method executes the crew for each item in the list, allowing you to process multiple items efficiently.
Here‚Äôs an example of how to kickoff a crew for each item in a list:
Codefrom crewai import Crew, Agent, Task

# Create an agent with code execution enabled
coding_agent = Agent(
    role="Python Data Analyst",
    goal="Analyze data and provide insights using Python",
    backstory="You are an experienced data analyst with strong Python skills.",
    allow_code_execution=True
)

# Create a task that requires code execution
data_analysis_task = Task(
    description="Analyze the given dataset and calculate the average age of participants. Ages: {ages}",
    agent=coding_agent,
    expected_output="The average age calculated from the dataset"
)

# Create a crew and add the task
analysis_crew = Crew(
    agents=[coding_agent],
    tasks=[data_analysis_task],
    verbose=True,
    memory=False,
    respect_context_window=True  # enable by default
)

datasets = [
  { "ages": [25, 30, 35, 40, 45] },
  { "ages": [20, 25, 30, 35, 40] },
  { "ages": [30, 35, 40, 45, 50] }
]

# Execute the crew
result = analysis_crew.kickoff_for_each(inputs=datasets)
Was this page helpful?YesNoKickoff Crew AsynchronouslyReplay Tasks from Latest Crew KickoffwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageIntroductionKicking Off a Crew for Each Item

Page: https://docs.crewai.com/how-to/replay-tasks-from-latest-crew-kickoff

Replay Tasks from Latest Crew Kickoff - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationHow to GuidesReplay Tasks from Latest Crew KickoffGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryHow to GuidesReplay Tasks from Latest Crew KickoffReplay tasks from the latest crew.kickoff(‚Ä¶)‚ÄãIntroduction
CrewAI provides the ability to replay from a task specified from the latest crew kickoff. This feature is particularly useful when you‚Äôve finished a kickoff and may want to retry certain tasks or don‚Äôt need to refetch data over and your agents already have the context saved from the kickoff execution so you just need to replay the tasks you want to.
You must run crew.kickoff() before you can replay a task.
Currently, only the latest kickoff is supported, so if you use kickoff_for_each, it will only allow you to replay from the most recent crew run.
Here‚Äôs an example of how to replay from a task:
‚ÄãReplaying from Specific Task Using the CLI
To use the replay feature, follow these steps:
1Open your terminal or command prompt.2Navigate to the directory where your CrewAI project is located.3Run the following commands:To view the latest kickoff task_ids use:crewai log-tasks-outputs
Once you have your task_id to replay, use:crewai replay -t <task_id>

Ensure crewai is installed and configured correctly in your development environment.
‚ÄãReplaying from a Task Programmatically
To replay from a task programmatically, use the following steps:
1Specify the `task_id` and input parameters for the replay process.Specify the task_id and input parameters for the replay process.2Execute the replay command within a try-except block to handle potential errors.Execute the replay command within a try-except block to handle potential errors.
‚ÄãConclusion
With the above enhancements and detailed functionality, replaying specific tasks in CrewAI has been made more efficient and robust.
Ensure you follow the commands and steps precisely to make the most of these features.Was this page helpful?YesNoKickoff Crew for EachConditional TaskswebsitexgithublinkedinyoutubePowered by MintlifyOn this pageIntroductionReplaying from Specific Task Using the CLIReplaying from a Task ProgrammaticallyConclusion

Page: https://docs.crewai.com/how-to/conditional-tasks

Conditional Tasks - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationHow to GuidesConditional TasksGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryHow to GuidesConditional TasksLearn how to use conditional tasks in a crewAI kickoff‚ÄãIntroduction
Conditional Tasks in crewAI allow for dynamic workflow adaptation based on the outcomes of previous tasks.
This powerful feature enables crews to make decisions and execute tasks selectively, enhancing the flexibility and efficiency of your AI-driven processes.
‚ÄãExample Usage
Codefrom typing import List
from pydantic import BaseModel
from crewai import Agent, Crew
from crewai.tasks.conditional_task import ConditionalTask
from crewai.tasks.task_output import TaskOutput
from crewai.task import Task
from crewai_tools import SerperDevTool

# Define a condition function for the conditional task
# If false, the task will be skipped, if true, then execute the task.
def is_data_missing(output: TaskOutput) -> bool:
    return len(output.pydantic.events) < 10  # this will skip this task

# Define the agents
data_fetcher_agent = Agent(
    role="Data Fetcher",
    goal="Fetch data online using Serper tool",
    backstory="Backstory 1",
    verbose=True,
    tools=[SerperDevTool()]
)

data_processor_agent = Agent(
    role="Data Processor",
    goal="Process fetched data",
    backstory="Backstory 2",
    verbose=True
)

summary_generator_agent = Agent(
    role="Summary Generator",
    goal="Generate summary from fetched data",
    backstory="Backstory 3",
    verbose=True
)

class EventOutput(BaseModel):
    events: List[str]

task1 = Task(
    description="Fetch data about events in San Francisco using Serper tool",
    expected_output="List of 10 things to do in SF this week",
    agent=data_fetcher_agent,
    output_pydantic=EventOutput,
)

conditional_task = ConditionalTask(
    description="""
        Check if data is missing. If we have less than 10 events,
        fetch more events using Serper tool so that
        we have a total of 10 events in SF this week..
        """,
    expected_output="List of 10 Things to do in SF this week",
    condition=is_data_missing,
    agent=data_processor_agent,
)

task3 = Task(
    description="Generate summary of events in San Francisco from fetched data",
    expected_output="A complete report on the customer and their customers and competitors, including their demographics, preferences, market positioning and audience engagement.",
    agent=summary_generator_agent,
)

# Create a crew with the tasks
crew = Crew(
    agents=[data_fetcher_agent, data_processor_agent, summary_generator_agent],
    tasks=[task1, conditional_task, task3],
    verbose=True,
    planning=True
)

# Run the crew
result = crew.kickoff()
print("results", result)
Was this page helpful?YesNoReplay Tasks from Latest Crew KickoffAgent Monitoring with AgentOpswebsitexgithublinkedinyoutubePowered by MintlifyOn this pageIntroductionExample Usage

Page: https://docs.crewai.com/how-to/agentops-observability

Agent Monitoring with AgentOps - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationHow to GuidesAgent Monitoring with AgentOpsGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryHow to GuidesAgent Monitoring with AgentOpsUnderstanding and logging your agent performance with AgentOps.‚ÄãIntroduction
Observability is a key aspect of developing and deploying conversational AI agents. It allows developers to understand how their agents are performing,
how their agents are interacting with users, and how their agents use external tools and APIs.
AgentOps is a product independent of CrewAI that provides a comprehensive observability solution for agents.
‚ÄãAgentOps
AgentOps provides session replays, metrics, and monitoring for agents.
At a high level, AgentOps gives you the ability to monitor cost, token usage, latency, agent failures, session-wide statistics, and more.
For more info, check out the AgentOps Repo.
‚ÄãOverview
AgentOps provides monitoring for agents in development and production.
It provides a dashboard for tracking agent performance, session replays, and custom reporting.
Additionally, AgentOps provides session drilldowns for viewing Crew agent interactions, LLM calls, and tool usage in real-time.
This feature is useful for debugging and understanding how agents interact with users as well as other agents.



‚ÄãFeatures

LLM Cost Management and Tracking: Track spend with foundation model providers.
Replay Analytics: Watch step-by-step agent execution graphs.
Recursive Thought Detection: Identify when agents fall into infinite loops.
Custom Reporting: Create custom analytics on agent performance.
Analytics Dashboard: Monitor high-level statistics about agents in development and production.
Public Model Testing: Test your agents against benchmarks and leaderboards.
Custom Tests: Run your agents against domain-specific tests.
Time Travel Debugging: Restart your sessions from checkpoints.
Compliance and Security: Create audit logs and detect potential threats such as profanity and PII leaks.
Prompt Injection Detection: Identify potential code injection and secret leaks.

‚ÄãUsing AgentOps
1Create an API KeyCreate a user API key here: Create API Key2Configure Your EnvironmentAdd your API key to your environment variables:AGENTOPS_API_KEY=<YOUR_AGENTOPS_API_KEY>
3Install AgentOpsInstall AgentOps with:pip install crewai[agentops]
orpip install agentops
4Initialize AgentOpsBefore using Crew in your script, include these lines:import agentops
agentops.init()
This will initiate an AgentOps session as well as automatically track Crew agents. For further info on how to outfit more complex agentic systems,
check out the AgentOps documentation or join the Discord.
‚ÄãCrew + AgentOps Examples
Job PostingExample of a Crew agent that generates job posts.Markdown ValidatorExample of a Crew agent that validates Markdown files.Instagram PostExample of a Crew agent that generates Instagram posts.
‚ÄãFurther Information
To get started, create an AgentOps account.
For feature requests or bug reports, please reach out to the AgentOps team on the AgentOps Repo.
‚ÄãExtra links
üê¶ Twitter
¬†¬†‚Ä¢¬†¬†
üì¢ Discord
¬†¬†‚Ä¢¬†¬†
üñáÔ∏è AgentOps Dashboard
¬†¬†‚Ä¢¬†¬†
üìô DocumentationWas this page helpful?YesNoConditional TasksAgent Monitoring with LangtracewebsitexgithublinkedinyoutubePowered by MintlifyOn this pageIntroductionAgentOpsOverviewFeaturesUsing AgentOpsCrew + AgentOps ExamplesFurther InformationExtra links

Page: https://docs.crewai.com/how-to/langtrace-observability

Agent Monitoring with Langtrace - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationHow to GuidesAgent Monitoring with LangtraceGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryHow to GuidesAgent Monitoring with LangtraceHow to monitor cost, latency, and performance of CrewAI Agents using Langtrace, an external observability tool.‚ÄãLangtrace Overview
Langtrace is an open-source, external tool that helps you set up observability and evaluations for Large Language Models (LLMs), LLM frameworks, and Vector Databases.
While not built directly into CrewAI, Langtrace can be used alongside CrewAI to gain deep visibility into the cost, latency, and performance of your CrewAI Agents.
This integration allows you to log hyperparameters, monitor performance regressions, and establish a process for continuous improvement of your Agents.



‚ÄãSetup Instructions
1Sign up for LangtraceSign up by visiting https://langtrace.ai/signup.2Create a projectSet the project type to CrewAI and generate an API key.3Install Langtrace in your CrewAI projectUse the following command:pip install langtrace-python-sdk
4Import LangtraceImport and initialize Langtrace at the beginning of your script, before any CrewAI imports:from langtrace_python_sdk import langtrace
langtrace.init(api_key='<LANGTRACE_API_KEY>')

# Now import CrewAI modules
from crewai import Agent, Task, Crew

‚ÄãFeatures and Their Application to CrewAI


LLM Token and Cost Tracking

Monitor the token usage and associated costs for each CrewAI agent interaction.



Trace Graph for Execution Steps

Visualize the execution flow of your CrewAI tasks, including latency and logs.
Useful for identifying bottlenecks in your agent workflows.



Dataset Curation with Manual Annotation

Create datasets from your CrewAI task outputs for future training or evaluation.



Prompt Versioning and Management

Keep track of different versions of prompts used in your CrewAI agents.
Useful for A/B testing and optimizing agent performance.



Prompt Playground with Model Comparisons

Test and compare different prompts and models for your CrewAI agents before deployment.



Testing and Evaluations

Set up automated tests for your CrewAI agents and tasks.


Was this page helpful?YesNoAgent Monitoring with AgentOpsBrowserbase Web LoaderwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageLangtrace OverviewSetup InstructionsFeatures and Their Application to CrewAI

Page: https://docs.crewai.com/tools/browserbaseloadtool

Browserbase Web Loader - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsBrowserbase Web LoaderGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsBrowserbase Web LoaderBrowserbase is a developer platform to reliably run, manage, and monitor headless browsers.‚ÄãBrowserbaseLoadTool
‚ÄãDescription
Browserbase is a developer platform to reliably run, manage, and monitor headless browsers.
Power your AI data retrievals with:

Serverless Infrastructure providing reliable browsers to extract data from complex UIs
Stealth Mode with included fingerprinting tactics and automatic captcha solving
Session Debugger to inspect your Browser Session with networks timeline and logs
Live Debug to quickly debug your automation

‚ÄãInstallation

Get an API key and Project ID from browserbase.com and set it in environment variables (BROWSERBASE_API_KEY, BROWSERBASE_PROJECT_ID).
Install the Browserbase SDK along with crewai[tools] package:

pip install browserbase 'crewai[tools]'

‚ÄãExample
Utilize the BrowserbaseLoadTool as follows to allow your agent to load websites:
Codefrom crewai_tools import BrowserbaseLoadTool

# Initialize the tool with the Browserbase API key and Project ID
tool = BrowserbaseLoadTool()

‚ÄãArguments
The following parameters can be used to customize the BrowserbaseLoadTool‚Äôs behavior:
ArgumentTypeDescriptionapi_keystringOptional. Browserbase API key. Default is BROWSERBASE_API_KEY env variable.project_idstringOptional. Browserbase Project ID. Default is BROWSERBASE_PROJECT_ID env variable.text_contentboolOptional. Retrieve only text content. Default is False.session_idstringOptional. Provide an existing Session ID.proxyboolOptional. Enable/Disable Proxies. Default is False.Was this page helpful?YesNoAgent Monitoring with LangtraceCode Docs RAG SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageBrowserbaseLoadToolDescriptionInstallationExampleArguments

Page: https://docs.crewai.com/tools/codedocssearchtool

Code Docs RAG Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsCode Docs RAG SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsCode Docs RAG SearchThe CodeDocsSearchTool is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within code documentation.‚ÄãCodeDocsSearchTool
Experimental: We are still working on improving tools, so there might be unexpected behavior or changes in the future.
‚ÄãDescription
The CodeDocsSearchTool is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within code documentation.
It enables users to efficiently find specific information or topics within code documentation. By providing a docs_url during initialization,
the tool narrows down the search to that particular documentation site. Alternatively, without a specific docs_url,
it searches across a wide array of code documentation known or discovered throughout its execution, making it versatile for various documentation search needs.
‚ÄãInstallation
To start using the CodeDocsSearchTool, first, install the crewai_tools package via pip:
pip install 'crewai[tools]'

‚ÄãExample
Utilize the CodeDocsSearchTool as follows to conduct searches within code documentation:
Codefrom crewai_tools import CodeDocsSearchTool

# To search any code documentation content 
# if the URL is known or discovered during its execution:
tool = CodeDocsSearchTool()

# OR

# To specifically focus your search on a given documentation site 
# by providing its URL:
tool = CodeDocsSearchTool(docs_url='https://docs.example.com/reference')

Substitute ‚Äôhttps://docs.example.com/reference‚Äô with your target documentation URL
and ‚ÄòHow to use search tool‚Äô with the search query relevant to your needs.
‚ÄãArguments
The following parameters can be used to customize the CodeDocsSearchTool‚Äôs behavior:
ArgumentTypeDescriptiondocs_urlstringOptional. Specifies the URL of the code documentation to be searched.
‚ÄãCustom model and embeddings
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
Codetool = CodeDocsSearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # or google, openai, anthropic, llama2, ...
            config=dict(
                model="llama2",
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="google", # or openai, ollama, ...
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)
Was this page helpful?YesNoBrowserbase Web LoaderCode InterpreterwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageCodeDocsSearchToolDescriptionInstallationExampleArgumentsCustom model and embeddings

Page: https://docs.crewai.com/tools/codeinterpretertool

Code Interpreter - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsCode InterpreterGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsCode InterpreterThe CodeInterpreterTool is a powerful tool designed for executing Python 3 code within a secure, isolated environment.‚ÄãCodeInterpreterTool
‚ÄãDescription
This tool enables the Agent to execute Python 3 code that it has generated autonomously. The code is run in a secure, isolated environment, ensuring safety regardless of the content.
This functionality is particularly valuable as it allows the Agent to create code, execute it within the same ecosystem,
obtain the results, and utilize that information to inform subsequent decisions and actions.
‚ÄãRequirements

Docker

‚ÄãInstallation
Install the crewai_tools package
pip install 'crewai[tools]'

‚ÄãExample
Remember that when using this tool, the code must be generated by the Agent itself.
The code must be a Python3 code. And it will take some time for the first time to run
because it needs to build the Docker image.
Codefrom crewai import Agent
from crewai_tools import CodeInterpreterTool

Agent(
    ...
    tools=[CodeInterpreterTool()],
)

We also provide a simple way to use it directly from the Agent.
Codefrom crewai import Agent

agent = Agent(
    ...
    allow_code_execution=True,
)
Was this page helpful?YesNoCode Docs RAG SearchComposio ToolwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageCodeInterpreterToolDescriptionRequirementsInstallationExample

Page: https://docs.crewai.com/tools/composiotool

Composio Tool - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsComposio ToolGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsComposio ToolThe ComposioTool is a wrapper around the composio set of tools and gives your agent access to a wide variety of tools from the Composio SDK.‚ÄãComposioTool
‚ÄãDescription
This tools is a wrapper around the composio set of tools and gives your agent access to a wide variety of tools from the Composio SDK.
‚ÄãInstallation
To incorporate this tool into your project, follow the installation instructions below:
pip install composio-core
pip install 'crewai[tools]'

after the installation is complete, either run composio login or export your composio API key as COMPOSIO_API_KEY.
‚ÄãExample
The following example demonstrates how to initialize the tool and execute a github action:

Initialize Composio tools

Codefrom composio import App
from crewai_tools import ComposioTool
from crewai import Agent, Task


tools = [ComposioTool.from_action(action=Action.GITHUB_ACTIVITY_STAR_REPO_FOR_AUTHENTICATED_USER)]

If you don‚Äôt know what action you want to use, use from_app and tags filter to get relevant actions
Codetools = ComposioTool.from_app(App.GITHUB, tags=["important"])

or use use_case to search relevant actions
Codetools = ComposioTool.from_app(App.GITHUB, use_case="Star a github repository")


Define agent

Codecrewai_agent = Agent(
    role="Github Agent",
    goal="You take action on Github using Github APIs",
    backstory=(
        "You are AI agent that is responsible for taking actions on Github "
        "on users behalf. You need to take action on Github using Github APIs"
    ),
    verbose=True,
    tools=tools,
)


Execute task

Codetask = Task(
    description="Star a repo ComposioHQ/composio on GitHub",
    agent=crewai_agent,
    expected_output="if the star happened",
)

task.execute()


More detailed list of tools can be found here
Was this page helpful?YesNoCode InterpreterCSV RAG SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageComposioToolDescriptionInstallationExample

Page: https://docs.crewai.com/tools/csvsearchtool

CSV RAG Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsCSV RAG SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsCSV RAG SearchThe CSVSearchTool is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within a CSV file‚Äôs content.‚ÄãCSVSearchTool
Experimental: We are still working on improving tools, so there might be unexpected behavior or changes in the future.
‚ÄãDescription
This tool is used to perform a RAG (Retrieval-Augmented Generation) search within a CSV file‚Äôs content. It allows users to semantically search for queries in the content of a specified CSV file.
This feature is particularly useful for extracting information from large CSV datasets where traditional search methods might be inefficient. All tools with ‚ÄúSearch‚Äù in their name, including CSVSearchTool,
are RAG tools designed for searching different sources of data.
‚ÄãInstallation
Install the crewai_tools package
pip install 'crewai[tools]'

‚ÄãExample
Codefrom crewai_tools import CSVSearchTool

# Initialize the tool with a specific CSV file. 
# This setup allows the agent to only search the given CSV file.
tool = CSVSearchTool(csv='path/to/your/csvfile.csv')

# OR

# Initialize the tool without a specific CSV file. 
# Agent will need to provide the CSV path at runtime.
tool = CSVSearchTool()

‚ÄãArguments
The following parameters can be used to customize the CSVSearchTool‚Äôs behavior:
ArgumentTypeDescriptioncsvstringOptional. The path to the CSV file you want to search. This is a mandatory argument if the tool was initialized without a specific CSV file; otherwise, it is optional.
‚ÄãCustom model and embeddings
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
Codetool = CSVSearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # or google, openai, anthropic, llama2, ...
            config=dict(
                model="llama2",
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="google", # or openai, ollama, ...
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)
Was this page helpful?YesNoComposio ToolDALL-E ToolwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageCSVSearchToolDescriptionInstallationExampleArgumentsCustom model and embeddings

Page: https://docs.crewai.com/tools/dalletool

DALL-E Tool - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsDALL-E ToolGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsDALL-E ToolThe DallETool is a powerful tool designed for generating images from textual descriptions.‚ÄãDallETool
‚ÄãDescription
This tool is used to give the Agent the ability to generate images using the DALL-E model. It is a transformer-based model that generates images from textual descriptions.
This tool allows the Agent to generate images based on the text input provided by the user.
‚ÄãInstallation
Install the crewai_tools package
pip install 'crewai[tools]'

‚ÄãExample
Remember that when using this tool, the text must be generated by the Agent itself. The text must be a description of the image you want to generate.
Codefrom crewai_tools import DallETool

Agent(
    ...
    tools=[DallETool()],
)

If needed you can also tweak the parameters of the DALL-E model by passing them as arguments to the DallETool class. For example:
Codefrom crewai_tools import DallETool

dalle_tool = DallETool(model="dall-e-3",
                       size="1024x1024",
                       quality="standard",
                       n=1)

Agent(
    ...
    tools=[dalle_tool]
)

The parameters are based on the client.images.generate method from the OpenAI API. For more information on the parameters,
please refer to the OpenAI API documentation.Was this page helpful?YesNoCSV RAG SearchDirectory RAG SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageDallEToolDescriptionInstallationExample

Page: https://docs.crewai.com/tools/directorysearchtool

Directory RAG Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsDirectory RAG SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsDirectory RAG SearchThe DirectorySearchTool is a powerful RAG (Retrieval-Augmented Generation) tool designed for semantic searches within a directory‚Äôs content.‚ÄãDirectorySearchTool
Experimental: The DirectorySearchTool is under continuous development. Features and functionalities might evolve, and unexpected behavior may occur as we refine the tool.
‚ÄãDescription
The DirectorySearchTool enables semantic search within the content of specified directories, leveraging the Retrieval-Augmented Generation (RAG) methodology for efficient navigation through files. Designed for flexibility, it allows users to dynamically specify search directories at runtime or set a fixed directory during initial setup.
‚ÄãInstallation
To use the DirectorySearchTool, begin by installing the crewai_tools package. Execute the following command in your terminal:
pip install 'crewai[tools]'

‚ÄãInitialization and Usage
Import the DirectorySearchTool from the crewai_tools package to start. You can initialize the tool without specifying a directory, enabling the setting of the search directory at runtime. Alternatively, the tool can be initialized with a predefined directory.
Codefrom crewai_tools import DirectorySearchTool

# For dynamic directory specification at runtime
tool = DirectorySearchTool()

# For fixed directory searches
tool = DirectorySearchTool(directory='/path/to/directory')

‚ÄãArguments

directory: A string argument that specifies the search directory. This is optional during initialization but required for searches if not set initially.

‚ÄãCustom Model and Embeddings
The DirectorySearchTool uses OpenAI for embeddings and summarization by default. Customization options for these settings include changing the model provider and configuration, enhancing flexibility for advanced users.
Codetool = DirectorySearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # Options include ollama, google, anthropic, llama2, and more
            config=dict(
                model="llama2",
                # Additional configurations here
            ),
        ),
        embedder=dict(
            provider="google", # or openai, ollama, ...
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)
Was this page helpful?YesNoDALL-E ToolDirectory ReadwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageDirectorySearchToolDescriptionInstallationInitialization and UsageArgumentsCustom Model and Embeddings

Page: https://docs.crewai.com/tools/directoryreadtool

Directory Read - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsDirectory ReadGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsDirectory ReadThe DirectoryReadTool is a powerful utility designed to provide a comprehensive listing of directory contents.‚ÄãDirectoryReadTool
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
‚ÄãDescription
The DirectoryReadTool is a powerful utility designed to provide a comprehensive listing of directory contents.
It can recursively navigate through the specified directory, offering users a detailed enumeration of all files, including those within subdirectories.
This tool is crucial for tasks that require a thorough inventory of directory structures or for validating the organization of files within directories.
‚ÄãInstallation
To utilize the DirectoryReadTool in your project, install the crewai_tools package. If this package is not yet part of your environment, you can install it using pip with the command below:
pip install 'crewai[tools]'

This command installs the latest version of the crewai_tools package, granting access to the DirectoryReadTool among other utilities.
‚ÄãExample
Employing the DirectoryReadTool is straightforward. The following code snippet demonstrates how to set it up and use the tool to list the contents of a specified directory:
Codefrom crewai_tools import DirectoryReadTool

# Initialize the tool so the agent can read any directory's content 
# it learns about during execution
tool = DirectoryReadTool()

# OR

# Initialize the tool with a specific directory, 
# so the agent can only read the content of the specified directory
tool = DirectoryReadTool(directory='/path/to/your/directory')

‚ÄãArguments
The following parameters can be used to customize the DirectoryReadTool‚Äôs behavior:
ArgumentTypeDescriptiondirectorystringOptional. An argument that specifies the path to the directory whose contents you wish to list. It accepts both absolute and relative paths, guiding the tool to the desired directory for content listing.Was this page helpful?YesNoDirectory RAG SearchDOCX RAG SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageDirectoryReadToolDescriptionInstallationExampleArguments

Page: https://docs.crewai.com/tools/docxsearchtool

DOCX RAG Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsDOCX RAG SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsDOCX RAG SearchThe DOCXSearchTool is a RAG tool designed for semantic searching within DOCX documents.‚ÄãDOCXSearchTool
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
‚ÄãDescription
The DOCXSearchTool is a RAG tool designed for semantic searching within DOCX documents.
It enables users to effectively search and extract relevant information from DOCX files using query-based searches.
This tool is invaluable for data analysis, information management, and research tasks,
streamlining the process of finding specific information within large document collections.
‚ÄãInstallation
Install the crewai_tools package by running the following command in your terminal:
pip install 'crewai[tools]'

‚ÄãExample
The following example demonstrates initializing the DOCXSearchTool to search within any DOCX file‚Äôs content or with a specific DOCX file path.
Codefrom crewai_tools import DOCXSearchTool

# Initialize the tool to search within any DOCX file's content
tool = DOCXSearchTool()

# OR

# Initialize the tool with a specific DOCX file, 
# so the agent can only search the content of the specified DOCX file
tool = DOCXSearchTool(docx='path/to/your/document.docx')

‚ÄãArguments
The following parameters can be used to customize the DOCXSearchTool‚Äôs behavior:
ArgumentTypeDescriptiondocxstringOptional. An argument that specifies the path to the DOCX file you want to search. If not provided during initialization, the tool allows for later specification of any DOCX file‚Äôs content path for searching.
‚ÄãCustom model and embeddings
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
Codetool = DOCXSearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # or google, openai, anthropic, llama2, ...
            config=dict(
                model="llama2",
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="google", # or openai, ollama, ...
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)
Was this page helpful?YesNoDirectory ReadEXA Search Web LoaderwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageDOCXSearchToolDescriptionInstallationExampleArgumentsCustom model and embeddings

Page: https://docs.crewai.com/tools/exasearchtool

EXA Search Web Loader - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsEXA Search Web LoaderGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsEXA Search Web LoaderThe EXASearchTool is designed to perform a semantic search for a specified query from a text‚Äôs content across the internet.‚ÄãEXASearchTool
‚ÄãDescription
The EXASearchTool is designed to perform a semantic search for a specified query from a text‚Äôs content across the internet.
It utilizes the exa.ai API to fetch and display the most relevant search results based on the query provided by the user.
‚ÄãInstallation
To incorporate this tool into your project, follow the installation instructions below:
pip install 'crewai[tools]'

‚ÄãExample
The following example demonstrates how to initialize the tool and execute a search with a given query:
Codefrom crewai_tools import EXASearchTool

# Initialize the tool for internet searching capabilities
tool = EXASearchTool()

‚ÄãSteps to Get Started
To effectively use the EXASearchTool, follow these steps:
1Package InstallationConfirm that the crewai[tools] package is installed in your Python environment.2API Key AcquisitionAcquire a exa.ai API key by registering for a free account at exa.ai.3Environment ConfigurationStore your obtained API key in an environment variable named EXA_API_KEY to facilitate its use by the tool.
‚ÄãConclusion
By integrating the EXASearchTool into Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.
By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward.Was this page helpful?YesNoDOCX RAG SearchFile ReadwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageEXASearchToolDescriptionInstallationExampleSteps to Get StartedConclusion

Page: https://docs.crewai.com/tools/filereadtool

File Read - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsFile ReadGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsFile ReadThe FileReadTool is designed to read files from the local file system.‚ÄãFileReadTool
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
‚ÄãDescription
The FileReadTool conceptually represents a suite of functionalities within the crewai_tools package aimed at facilitating file reading and content retrieval.
This suite includes tools for processing batch text files, reading runtime configuration files, and importing data for analytics.
It supports a variety of text-based file formats such as .txt, .csv, .json, and more. Depending on the file type, the suite offers specialized functionality,
such as converting JSON content into a Python dictionary for ease of use.
‚ÄãInstallation
To utilize the functionalities previously attributed to the FileReadTool, install the crewai_tools package:
pip install 'crewai[tools]'

‚ÄãUsage Example
To get started with the FileReadTool:
Codefrom crewai_tools import FileReadTool

# Initialize the tool to read any files the agents knows or lean the path for
file_read_tool = FileReadTool()

# OR

# Initialize the tool with a specific file path, so the agent can only read the content of the specified file
file_read_tool = FileReadTool(file_path='path/to/your/file.txt')

‚ÄãArguments

file_path: The path to the file you want to read. It accepts both absolute and relative paths. Ensure the file exists and you have the necessary permissions to access it.
Was this page helpful?YesNoEXA Search Web LoaderFile WritewebsitexgithublinkedinyoutubePowered by MintlifyOn this pageFileReadToolDescriptionInstallationUsage ExampleArguments

Page: https://docs.crewai.com/tools/filewritetool

File Write - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsFile WriteGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsFile WriteThe FileWriterTool is designed to write content to files.‚ÄãFileWriterTool
‚ÄãDescription
The FileWriterTool is a component of the crewai_tools package, designed to simplify the process of writing content to files.
It is particularly useful in scenarios such as generating reports, saving logs, creating configuration files, and more.
This tool supports creating new directories if they don‚Äôt exist, making it easier to organize your output.
‚ÄãInstallation
Install the crewai_tools package to use the FileWriterTool in your projects:
pip install 'crewai[tools]'

‚ÄãExample
To get started with the FileWriterTool:
Codefrom crewai_tools import FileWriterTool

# Initialize the tool
file_writer_tool = FileWriterTool()

# Write content to a file in a specified directory
result = file_writer_tool._run('example.txt', 'This is a test content.', 'test_directory')
print(result)

‚ÄãArguments

filename: The name of the file you want to create or overwrite.
content: The content to write into the file.
directory (optional): The path to the directory where the file will be created. Defaults to the current directory (.). If the directory does not exist, it will be created.

‚ÄãConclusion
By integrating the FileWriterTool into your crews, the agents can execute the process of writing content to files and creating directories.
This tool is essential for tasks that require saving output data, creating structured file systems, and more. By adhering to the setup and usage guidelines provided,
incorporating this tool into projects is straightforward and efficient.Was this page helpful?YesNoFile ReadFirecrawl Crawl WebsitewebsitexgithublinkedinyoutubePowered by MintlifyOn this pageFileWriterToolDescriptionInstallationExampleArgumentsConclusion

Page: https://docs.crewai.com/tools/firecrawlcrawlwebsitetool

Firecrawl Crawl Website - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsFirecrawl Crawl WebsiteGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsFirecrawl Crawl WebsiteThe FirecrawlCrawlWebsiteTool is designed to crawl and convert websites into clean markdown or structured data.‚ÄãFirecrawlCrawlWebsiteTool
‚ÄãDescription
Firecrawl is a platform for crawling and convert any website into clean markdown or structured data.
‚ÄãInstallation

Get an API key from firecrawl.dev and set it in environment variables (FIRECRAWL_API_KEY).
Install the Firecrawl SDK along with crewai[tools] package:

pip install firecrawl-py 'crewai[tools]'

‚ÄãExample
Utilize the FirecrawlScrapeFromWebsiteTool as follows to allow your agent to load websites:
Codefrom crewai_tools import FirecrawlCrawlWebsiteTool

tool = FirecrawlCrawlWebsiteTool(url='firecrawl.dev')

‚ÄãArguments

api_key: Optional. Specifies Firecrawl API key. Defaults is the FIRECRAWL_API_KEY environment variable.
url: The base URL to start crawling from.
page_options: Optional.

onlyMainContent: Optional. Only return the main content of the page excluding headers, navs, footers, etc.
includeHtml: Optional. Include the raw HTML content of the page. Will output a html key in the response.


crawler_options: Optional. Options for controlling the crawling behavior.

includes: Optional. URL patterns to include in the crawl.
exclude: Optional. URL patterns to exclude from the crawl.
generateImgAltText: Optional. Generate alt text for images using LLMs (requires a paid plan).
returnOnlyUrls: Optional. If true, returns only the URLs as a list in the crawl status. Note: the response will be a list of URLs inside the data, not a list of documents.
maxDepth: Optional. Maximum depth to crawl. Depth 1 is the base URL, depth 2 includes the base URL and its direct children, and so on.
mode: Optional. The crawling mode to use. Fast mode crawls 4x faster on websites without a sitemap but may not be as accurate and shouldn‚Äôt be used on heavily JavaScript-rendered websites.
limit: Optional. Maximum number of pages to crawl.
timeout: Optional. Timeout in milliseconds for the crawling operation.


Was this page helpful?YesNoFile WriteFirecrawl Scrape WebsitewebsitexgithublinkedinyoutubePowered by MintlifyOn this pageFirecrawlCrawlWebsiteToolDescriptionInstallationExampleArguments

Page: https://docs.crewai.com/tools/firecrawlscrapewebsitetool

Firecrawl Scrape Website - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsFirecrawl Scrape WebsiteGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsFirecrawl Scrape WebsiteThe FirecrawlScrapeWebsiteTool is designed to scrape websites and convert them into clean markdown or structured data.‚ÄãFirecrawlScrapeWebsiteTool
‚ÄãDescription
Firecrawl is a platform for crawling and convert any website into clean markdown or structured data.
‚ÄãInstallation

Get an API key from firecrawl.dev and set it in environment variables (FIRECRAWL_API_KEY).
Install the Firecrawl SDK along with crewai[tools] package:

pip install firecrawl-py 'crewai[tools]'

‚ÄãExample
Utilize the FirecrawlScrapeWebsiteTool as follows to allow your agent to load websites:
Codefrom crewai_tools import FirecrawlScrapeWebsiteTool

tool = FirecrawlScrapeWebsiteTool(url='firecrawl.dev')

‚ÄãArguments

api_key: Optional. Specifies Firecrawl API key. Defaults is the FIRECRAWL_API_KEY environment variable.
url: The URL to scrape.
page_options: Optional.

onlyMainContent: Optional. Only return the main content of the page excluding headers, navs, footers, etc.
includeHtml: Optional. Include the raw HTML content of the page. Will output a html key in the response.


extractor_options: Optional. Options for LLM-based extraction of structured information from the page content

mode: The extraction mode to use, currently supports ‚Äòllm-extraction‚Äô
extractionPrompt: Optional. A prompt describing what information to extract from the page
extractionSchema: Optional. The schema for the data to be extracted


timeout: Optional. Timeout in milliseconds for the request
Was this page helpful?YesNoFirecrawl Crawl WebsiteFirecrawl SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageFirecrawlScrapeWebsiteToolDescriptionInstallationExampleArguments

Page: https://docs.crewai.com/tools/firecrawlsearchtool

Firecrawl Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsFirecrawl SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsFirecrawl SearchThe FirecrawlSearchTool is designed to search websites and convert them into clean markdown or structured data.‚ÄãFirecrawlSearchTool
‚ÄãDescription
Firecrawl is a platform for crawling and convert any website into clean markdown or structured data.
‚ÄãInstallation

Get an API key from firecrawl.dev and set it in environment variables (FIRECRAWL_API_KEY).
Install the Firecrawl SDK along with crewai[tools] package:

pip install firecrawl-py 'crewai[tools]'

‚ÄãExample
Utilize the FirecrawlSearchTool as follows to allow your agent to load websites:
Codefrom crewai_tools import FirecrawlSearchTool

tool = FirecrawlSearchTool(query='what is firecrawl?')

‚ÄãArguments

api_key: Optional. Specifies Firecrawl API key. Defaults is the FIRECRAWL_API_KEY environment variable.
query: The search query string to be used for searching.
page_options: Optional. Options for result formatting.

onlyMainContent: Optional. Only return the main content of the page excluding headers, navs, footers, etc.
includeHtml: Optional. Include the raw HTML content of the page. Will output a html key in the response.
fetchPageContent: Optional. Fetch the full content of the page.


search_options: Optional. Options for controlling the crawling behavior.

limit: Optional. Maximum number of pages to crawl.


Was this page helpful?YesNoFirecrawl Scrape WebsiteGithub SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageFirecrawlSearchToolDescriptionInstallationExampleArguments

Page: https://docs.crewai.com/tools/githubsearchtool

Github Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsGithub SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsGithub SearchThe GithubSearchTool is designed to search websites and convert them into clean markdown or structured data.‚ÄãGithubSearchTool
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
‚ÄãDescription
The GithubSearchTool is a Retrieval-Augmented Generation (RAG) tool specifically designed for conducting semantic searches within GitHub repositories. Utilizing advanced semantic search capabilities, it sifts through code, pull requests, issues, and repositories, making it an essential tool for developers, researchers, or anyone in need of precise information from GitHub.
‚ÄãInstallation
To use the GithubSearchTool, first ensure the crewai_tools package is installed in your Python environment:
pip install 'crewai[tools]'

This command installs the necessary package to run the GithubSearchTool along with any other tools included in the crewai_tools package.
‚ÄãExample
Here‚Äôs how you can use the GithubSearchTool to perform semantic searches within a GitHub repository:
Codefrom crewai_tools import GithubSearchTool

# Initialize the tool for semantic searches within a specific GitHub repository
tool = GithubSearchTool(
	github_repo='https://github.com/example/repo',
	content_types=['code', 'issue'] # Options: code, repo, pr, issue
)

# OR

# Initialize the tool for semantic searches within a specific GitHub repository, so the agent can search any repository if it learns about during its execution
tool = GithubSearchTool(
	content_types=['code', 'issue'] # Options: code, repo, pr, issue
)

‚ÄãArguments

github_repo : The URL of the GitHub repository where the search will be conducted. This is a mandatory field and specifies the target repository for your search.
content_types : Specifies the types of content to include in your search. You must provide a list of content types from the following options: code for searching within the code,
repo for searching within the repository‚Äôs general information, pr for searching within pull requests, and issue for searching within issues.
This field is mandatory and allows tailoring the search to specific content types within the GitHub repository.

‚ÄãCustom model and embeddings
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
Codetool = GithubSearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # or google, openai, anthropic, llama2, ...
            config=dict(
                model="llama2",
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="google", # or openai, ollama, ...
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)
Was this page helpful?YesNoFirecrawl SearchGoogle Serper SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageGithubSearchToolDescriptionInstallationExampleArgumentsCustom model and embeddings

Page: https://docs.crewai.com/tools/serperdevtool

Google Serper Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsGoogle Serper SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsGoogle Serper SearchThe SerperDevTool is designed to search the internet and return the most relevant results.‚ÄãSerperDevTool
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
‚ÄãDescription
This tool is designed to perform a semantic search for a specified query from a text‚Äôs content across the internet. It utilizes the serper.dev API
to fetch and display the most relevant search results based on the query provided by the user.
‚ÄãInstallation
To incorporate this tool into your project, follow the installation instructions below:
pip install 'crewai[tools]'

‚ÄãExample
The following example demonstrates how to initialize the tool and execute a search with a given query:
Codefrom crewai_tools import SerperDevTool

# Initialize the tool for internet searching capabilities
tool = SerperDevTool()

‚ÄãSteps to Get Started
To effectively use the SerperDevTool, follow these steps:

Package Installation: Confirm that the crewai[tools] package is installed in your Python environment.
API Key Acquisition: Acquire a serper.dev API key by registering for a free account at serper.dev.
Environment Configuration: Store your obtained API key in an environment variable named SERPER_API_KEY to facilitate its use by the tool.

‚ÄãParameters
The SerperDevTool comes with several parameters that will be passed to the API :


search_url: The URL endpoint for the search API. (Default is https://google.serper.dev/search)


country: Optional. Specify the country for the search results.


location: Optional. Specify the location for the search results.


locale: Optional. Specify the locale for the search results.


n_results: Number of search results to return. Default is 10.


The values for country, location, locale and search_url can be found on the Serper Playground.
‚ÄãExample with Parameters
Here is an example demonstrating how to use the tool with additional parameters:
Codefrom crewai_tools import SerperDevTool

tool = SerperDevTool(
    search_url="https://google.serper.dev/scholar",
    n_results=2,
)

print(tool.run(search_query="ChatGPT"))

# Using Tool: Search the internet

# Search results: Title: Role of chat gpt in public health
# Link: https://link.springer.com/article/10.1007/s10439-023-03172-7
# Snippet: ‚Ä¶ ChatGPT in public health. In this overview, we will examine the potential uses of ChatGPT in
# ---
# Title: Potential use of chat gpt in global warming
# Link: https://link.springer.com/article/10.1007/s10439-023-03171-8
# Snippet: ‚Ä¶ as ChatGPT, have the potential to play a critical role in advancing our understanding of climate
# ---


Codefrom crewai_tools import SerperDevTool

tool = SerperDevTool(
    country="fr",
    locale="fr",
    location="Paris, Paris, Ile-de-France, France",
    n_results=2,
)

print(tool.run(search_query="Jeux Olympiques"))

# Using Tool: Search the internet

# Search results: Title: Jeux Olympiques de Paris 2024 - Actualit√©s, calendriers, r√©sultats
# Link: https://olympics.com/fr/paris-2024
# Snippet: Quels sont les sports pr√©sents aux Jeux Olympiques de Paris 2024 ? ¬∑ Athl√©tisme ¬∑ Aviron ¬∑ Badminton ¬∑ Basketball ¬∑ Basketball 3x3 ¬∑ Boxe ¬∑ Breaking ¬∑ Cano√´ ...
# ---
# Title: Billetterie Officielle de Paris 2024 - Jeux Olympiques et Paralympiques
# Link: https://tickets.paris2024.org/
# Snippet: Achetez vos billets exclusivement sur le site officiel de la billetterie de Paris 2024 pour participer au plus grand √©v√©nement sportif au monde.
# ---

‚ÄãConclusion
By integrating the SerperDevTool into Python projects, users gain the ability to conduct real-time, relevant searches across the internet directly from their applications.
The updated parameters allow for more customized and localized search results. By adhering to the setup and usage guidelines provided, incorporating this tool into projects is streamlined and straightforward.Was this page helpful?YesNoGithub SearchJSON RAG SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageSerperDevToolDescriptionInstallationExampleSteps to Get StartedParametersExample with ParametersConclusion

Page: https://docs.crewai.com/tools/jsonsearchtool

JSON RAG Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsJSON RAG SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsJSON RAG SearchThe JSONSearchTool is designed to search JSON files and return the most relevant results.‚ÄãJSONSearchTool
The JSONSearchTool is currently in an experimental phase. This means the tool is under active development, and users might encounter unexpected behavior or changes.
We highly encourage feedback on any issues or suggestions for improvements.
‚ÄãDescription
The JSONSearchTool is designed to facilitate efficient and precise searches within JSON file contents. It utilizes a RAG (Retrieve and Generate) search mechanism, allowing users to specify a JSON path for targeted searches within a particular JSON file. This capability significantly improves the accuracy and relevance of search results.
‚ÄãInstallation
To install the JSONSearchTool, use the following pip command:
pip install 'crewai[tools]'

‚ÄãUsage Examples
Here are updated examples on how to utilize the JSONSearchTool effectively for searching within JSON files. These examples take into account the current implementation and usage patterns identified in the codebase.
Codefrom crewai.json_tools import JSONSearchTool  # Updated import path

# General JSON content search
# This approach is suitable when the JSON path is either known beforehand or can be dynamically identified.
tool = JSONSearchTool()

# Restricting search to a specific JSON file
# Use this initialization method when you want to limit the search scope to a specific JSON file.
tool = JSONSearchTool(json_path='./path/to/your/file.json')

‚ÄãArguments

json_path (str, optional): Specifies the path to the JSON file to be searched. This argument is not required if the tool is initialized for a general search. When provided, it confines the search to the specified JSON file.

‚ÄãConfiguration Options
The JSONSearchTool supports extensive customization through a configuration dictionary. This allows users to select different models for embeddings and summarization based on their requirements.
Codetool = JSONSearchTool(
    config={
        "llm": {
            "provider": "ollama",  # Other options include google, openai, anthropic, llama2, etc.
            "config": {
                "model": "llama2",
                # Additional optional configurations can be specified here.
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            },
        },
        "embedder": {
            "provider": "google", # or openai, ollama, ...
            "config": {
                "model": "models/embedding-001",
                "task_type": "retrieval_document",
                # Further customization options can be added here.
            },
        },
    }
)
Was this page helpful?YesNoGoogle Serper SearchMDX RAG SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageJSONSearchToolDescriptionInstallationUsage ExamplesArgumentsConfiguration Options

Page: https://docs.crewai.com/tools/mdxsearchtool

MDX RAG Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsMDX RAG SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsMDX RAG SearchThe MDXSearchTool is designed to search MDX files and return the most relevant results.‚ÄãMDXSearchTool
The MDXSearchTool is in continuous development. Features may be added or removed, and functionality could change unpredictably as we refine the tool.
‚ÄãDescription
The MDX Search Tool is a component of the crewai_tools package aimed at facilitating advanced markdown language extraction. It enables users to effectively search and extract relevant information from MD files using query-based searches. This tool is invaluable for data analysis, information management, and research tasks, streamlining the process of finding specific information within large document collections.
‚ÄãInstallation
Before using the MDX Search Tool, ensure the crewai_tools package is installed. If it is not, you can install it with the following command:
pip install 'crewai[tools]'

‚ÄãUsage Example
To use the MDX Search Tool, you must first set up the necessary environment variables. Then, integrate the tool into your crewAI project to begin your market research. Below is a basic example of how to do this:
Codefrom crewai_tools import MDXSearchTool

# Initialize the tool to search any MDX content it learns about during execution
tool = MDXSearchTool()

# OR

# Initialize the tool with a specific MDX file path for an exclusive search within that document
tool = MDXSearchTool(mdx='path/to/your/document.mdx')

‚ÄãParameters

mdx: Optional. Specifies the MDX file path for the search. It can be provided during initialization.

‚ÄãCustomization of Model and Embeddings
The tool defaults to using OpenAI for embeddings and summarization. For customization, utilize a configuration dictionary as shown below:
Codetool = MDXSearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # Options include google, openai, anthropic, llama2, etc.
            config=dict(
                model="llama2",
                # Optional parameters can be included here.
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="google", # or openai, ollama, ...
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # Optional title for the embeddings can be added here.
                # title="Embeddings",
            ),
        ),
    )
)
Was this page helpful?YesNoJSON RAG SearchMySQL RAG SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageMDXSearchToolDescriptionInstallationUsage ExampleParametersCustomization of Model and Embeddings

Page: https://docs.crewai.com/tools/mysqltool

MySQL RAG Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsMySQL RAG SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsMySQL RAG SearchThe MySQLSearchTool is designed to search MySQL databases and return the most relevant results.‚ÄãMySQLSearchTool
‚ÄãDescription
This tool is designed to facilitate semantic searches within MySQL database tables. Leveraging the RAG (Retrieve and Generate) technology,
the MySQLSearchTool provides users with an efficient means of querying database table content, specifically tailored for MySQL databases.
It simplifies the process of finding relevant data through semantic search queries, making it an invaluable resource for users needing
to perform advanced queries on extensive datasets within a MySQL database.
‚ÄãInstallation
To install the crewai_tools package and utilize the MySQLSearchTool, execute the following command in your terminal:
pip install 'crewai[tools]'

‚ÄãExample
Below is an example showcasing how to use the MySQLSearchTool to conduct a semantic search on a table within a MySQL database:
Codefrom crewai_tools import MySQLSearchTool

# Initialize the tool with the database URI and the target table name
tool = MySQLSearchTool(
    db_uri='mysql://user:password@localhost:3306/mydatabase',
    table_name='employees'
)

‚ÄãArguments
The MySQLSearchTool requires the following arguments for its operation:

db_uri: A string representing the URI of the MySQL database to be queried. This argument is mandatory and must include the necessary authentication details and the location of the database.
table_name: A string specifying the name of the table within the database on which the semantic search will be performed. This argument is mandatory.

‚ÄãCustom model and embeddings
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
Codetool = MySQLSearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # or google, openai, anthropic, llama2, ...
            config=dict(
                model="llama2",
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="google",
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)
Was this page helpful?YesNoMDX RAG SearchNL2SQL ToolwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageMySQLSearchToolDescriptionInstallationExampleArgumentsCustom model and embeddings

Page: https://docs.crewai.com/tools/nl2sqltool

NL2SQL Tool - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsNL2SQL ToolGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsNL2SQL ToolThe NL2SQLTool is designed to convert natural language to SQL queries.‚ÄãNL2SQLTool
‚ÄãDescription
This tool is used to convert natural language to SQL queries. When passsed to the agent it will generate queries and then use them to interact with the database.
This enables multiple workflows like having an Agent to access the database fetch information based on the goal and then use the information to generate a response, report or any other output.
Along with that proivdes the ability for the Agent to update the database based on its goal.
Attention: Make sure that the Agent has access to a Read-Replica or that is okay for the Agent to run insert/update queries on the database.
‚ÄãRequirements

SqlAlchemy
Any DB compatible library (e.g. psycopg2, mysql-connector-python)

‚ÄãInstallation
Install the crewai_tools package
pip install 'crewai[tools]'

‚ÄãUsage
In order to use the NL2SQLTool, you need to pass the database URI to the tool. The URI should be in the format dialect+driver://username:password@host:port/database.
Codefrom crewai_tools import NL2SQLTool

# psycopg2 was installed to run this example with PostgreSQL
nl2sql = NL2SQLTool(db_uri="postgresql://example@localhost:5432/test_db")

@agent
def researcher(self) -> Agent:
    return Agent(
        config=self.agents_config["researcher"],
        allow_delegation=False,
        tools=[nl2sql]
    )

‚ÄãExample
The primary task goal was:
‚ÄúRetrieve the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of user in each city and
sort the results by the average monthly revenue in descending order‚Äù
So the Agent tried to get information from the DB, the first one is wrong so the Agent tries again and gets the correct information and passes to the next agent.


The second task goal was:
‚ÄúReview the data and create a detailed report, and then create the table on the database with the fields based on the data provided.
Include information on the average, maximum, and minimum monthly revenue for each city, but only include cities that have more than one user. Also, count the number of users in each city and sort the results by the average monthly revenue in descending order.‚Äù
Now things start to get interesting, the Agent generates the SQL query to not only create the table but also insert the data into the table. And in the end the Agent still returns the final report which is exactly what was in the database.




This is a simple example of how the NL2SQLTool can be used to interact with the database and generate reports based on the data in the database.
The Tool provides endless possibilities on the logic of the Agent and how it can interact with the database.
 DB -> Agent -> ... -> Agent -> DB
Was this page helpful?YesNoMySQL RAG SearchPDF RAG SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageNL2SQLToolDescriptionRequirementsInstallationUsageExample

Page: https://docs.crewai.com/tools/pdfsearchtool

PDF RAG Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsPDF RAG SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsPDF RAG SearchThe PDFSearchTool is designed to search PDF files and return the most relevant results.‚ÄãPDFSearchTool
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
‚ÄãDescription
The PDFSearchTool is a RAG tool designed for semantic searches within PDF content. It allows for inputting a search query and a PDF document, leveraging advanced search techniques to find relevant content efficiently.
This capability makes it especially useful for extracting specific information from large PDF files quickly.
‚ÄãInstallation
To get started with the PDFSearchTool, first, ensure the crewai_tools package is installed with the following command:
pip install 'crewai[tools]'

‚ÄãExample
Here‚Äôs how to use the PDFSearchTool to search within a PDF document:
Codefrom crewai_tools import PDFSearchTool

# Initialize the tool allowing for any PDF content search if the path is provided during execution
tool = PDFSearchTool()

# OR

# Initialize the tool with a specific PDF path for exclusive search within that document
tool = PDFSearchTool(pdf='path/to/your/document.pdf')

‚ÄãArguments

pdf: Optional The PDF path for the search. Can be provided at initialization or within the run method‚Äôs arguments. If provided at initialization, the tool confines its search to the specified document.

‚ÄãCustom model and embeddings
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
Codetool = PDFSearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # or google, openai, anthropic, llama2, ...
            config=dict(
                model="llama2",
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="google", # or openai, ollama, ...
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)
Was this page helpful?YesNoNL2SQL ToolPG RAG SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pagePDFSearchToolDescriptionInstallationExampleArgumentsCustom model and embeddings

Page: https://docs.crewai.com/tools/pgsearchtool

PG RAG Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsPG RAG SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsPG RAG SearchThe PGSearchTool is designed to search PostgreSQL databases and return the most relevant results.‚ÄãPGSearchTool
The PGSearchTool is currently under development. This document outlines the intended functionality and interface.
As development progresses, please be aware that some features may not be available or could change.
‚ÄãDescription
The PGSearchTool is envisioned as a powerful tool for facilitating semantic searches within PostgreSQL database tables. By leveraging advanced Retrieve and Generate (RAG) technology,
it aims to provide an efficient means for querying database table content, specifically tailored for PostgreSQL databases.
The tool‚Äôs goal is to simplify the process of finding relevant data through semantic search queries, offering a valuable resource for users needing to conduct advanced queries on
extensive datasets within a PostgreSQL environment.
‚ÄãInstallation
The crewai_tools package, which will include the PGSearchTool upon its release, can be installed using the following command:
pip install 'crewai[tools]'

The PGSearchTool is not yet available in the current version of the crewai_tools package. This installation command will be updated once the tool is released.
‚ÄãExample Usage
Below is a proposed example showcasing how to use the PGSearchTool for conducting a semantic search on a table within a PostgreSQL database:
Codefrom crewai_tools import PGSearchTool

# Initialize the tool with the database URI and the target table name
tool = PGSearchTool(
    db_uri='postgresql://user:password@localhost:5432/mydatabase', 
    table_name='employees'
)

‚ÄãArguments
The PGSearchTool is designed to require the following arguments for its operation:
ArgumentTypeDescriptiondb_uristringMandatory. A string representing the URI of the PostgreSQL database to be queried. This argument will be mandatory and must include the necessary authentication details and the location of the database.table_namestringMandatory. A string specifying the name of the table within the database on which the semantic search will be performed. This argument will also be mandatory.
‚ÄãCustom Model and Embeddings
The tool intends to use OpenAI for both embeddings and summarization by default. Users will have the option to customize the model using a config dictionary as follows:
Codetool = PGSearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # or google, openai, anthropic, llama2, ...
            config=dict(
                model="llama2",
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="google", # or openai, ollama, ...
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)
Was this page helpful?YesNoPDF RAG SearchScrape WebsitewebsitexgithublinkedinyoutubePowered by MintlifyOn this pagePGSearchToolDescriptionInstallationExample UsageArgumentsCustom Model and Embeddings

Page: https://docs.crewai.com/tools/scrapewebsitetool

Scrape Website - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsScrape WebsiteGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsScrape WebsiteThe ScrapeWebsiteTool is designed to extract and read the content of a specified website.‚ÄãScrapeWebsiteTool
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
‚ÄãDescription
A tool designed to extract and read the content of a specified website. It is capable of handling various types of web pages by making HTTP requests and parsing the received HTML content.
This tool can be particularly useful for web scraping tasks, data collection, or extracting specific information from websites.
‚ÄãInstallation
Install the crewai_tools package
pip install 'crewai[tools]'

‚ÄãExample
from crewai_tools import ScrapeWebsiteTool

# To enable scrapping any website it finds during it's execution
tool = ScrapeWebsiteTool()

# Initialize the tool with the website URL, 
# so the agent can only scrap the content of the specified website
tool = ScrapeWebsiteTool(website_url='https://www.example.com')

# Extract the text from the site
text = tool.run()
print(text)

‚ÄãArguments
ArgumentTypeDescriptionwebsite_urlstringMandatory website URL to read the file. This is the primary input for the tool, specifying which website‚Äôs content should be scraped and read.Was this page helpful?YesNoPG RAG SearchSelenium ScraperwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageScrapeWebsiteToolDescriptionInstallationExampleArguments

Page: https://docs.crewai.com/tools/seleniumscrapingtool

Selenium Scraper - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsSelenium ScraperGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsSelenium ScraperThe SeleniumScrapingTool is designed to extract and read the content of a specified website using Selenium.‚ÄãSeleniumScrapingTool
This tool is currently in development. As we refine its capabilities, users may encounter unexpected behavior.
Your feedback is invaluable to us for making improvements.
‚ÄãDescription
The SeleniumScrapingTool is crafted for high-efficiency web scraping tasks.
It allows for precise extraction of content from web pages by using CSS selectors to target specific elements.
Its design caters to a wide range of scraping needs, offering flexibility to work with any provided website URL.
‚ÄãInstallation
To get started with the SeleniumScrapingTool, install the crewai_tools package using pip:
pip install 'crewai[tools]'

‚ÄãUsage Examples
Below are some scenarios where the SeleniumScrapingTool can be utilized:
Codefrom crewai_tools import SeleniumScrapingTool

# Example 1: 
# Initialize the tool without any parameters to scrape 
# the current page it navigates to
tool = SeleniumScrapingTool()

# Example 2: 
# Scrape the entire webpage of a given URL
tool = SeleniumScrapingTool(website_url='https://example.com')

# Example 3: 
# Target and scrape a specific CSS element from a webpage
tool = SeleniumScrapingTool(
    website_url='https://example.com',
    css_element='.main-content'
)

# Example 4: 
# Perform scraping with additional parameters for a customized experience
tool = SeleniumScrapingTool(
    website_url='https://example.com',
    css_element='.main-content',
    cookie={'name': 'user', 'value': 'John Doe'},
    wait_time=10
)

‚ÄãArguments
The following parameters can be used to customize the SeleniumScrapingTool‚Äôs scraping process:
ArgumentTypeDescriptionwebsite_urlstringMandatory. Specifies the URL of the website from which content is to be scraped.css_elementstringMandatory. The CSS selector for a specific element to target on the website, enabling focused scraping of a particular part of a webpage.cookieobjectOptional. A dictionary containing cookie information, useful for simulating a logged-in session to access restricted content.wait_timeintOptional. Specifies the delay (in seconds) before scraping, allowing the website and any dynamic content to fully load.
Since the SeleniumScrapingTool is under active development, the parameters and functionality may evolve over time.
Users are encouraged to keep the tool updated and report any issues or suggestions for enhancements.Was this page helpful?YesNoScrape WebsiteSpider ScraperwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageSeleniumScrapingToolDescriptionInstallationUsage ExamplesArguments

Page: https://docs.crewai.com/tools/spidertool

Spider Scraper - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsSpider ScraperGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsSpider ScraperThe SpiderTool is designed to extract and read the content of a specified website using Spider.‚ÄãSpiderTool
‚ÄãDescription
Spider is the fastest
open source scraper and crawler that returns LLM-ready data.
It converts any website into pure HTML, markdown, metadata or text while enabling you to crawl with custom actions using AI.
‚ÄãInstallation
To use the SpiderTool you need to download the Spider SDK
and the crewai[tools] SDK too:
pip install spider-client 'crewai[tools]'

‚ÄãExample
This example shows you how you can use the SpiderTool to enable your agent to scrape and crawl websites.
The data returned from the Spider API is already LLM-ready, so no need to do any cleaning there.
Codefrom crewai_tools import SpiderTool

def main():
    spider_tool = SpiderTool()

    searcher = Agent(
        role="Web Research Expert",
        goal="Find related information from specific URL's",
        backstory="An expert web researcher that uses the web extremely well",
        tools=[spider_tool],
        verbose=True,
    )

    return_metadata = Task(
        description="Scrape https://spider.cloud with a limit of 1 and enable metadata",
        expected_output="Metadata and 10 word summary of spider.cloud",
        agent=searcher
    )

    crew = Crew(
        agents=[searcher],
        tasks=[
            return_metadata,
        ],
        verbose=2
    )

    crew.kickoff()

if __name__ == "__main__":
    main()

‚ÄãArguments
ArgumentTypeDescriptionapi_keystringSpecifies Spider API key. If not specified, it looks for SPIDER_API_KEY in environment variables.paramsobjectOptional parameters for the request. Defaults to {"return_format": "markdown"} to optimize content for LLMs.requeststringType of request to perform (http, chrome, smart). smart defaults to HTTP, switching to JavaScript rendering if needed.limitintMax pages to crawl per website. Set to 0 or omit for unlimited.depthintMax crawl depth. Set to 0 for no limit.cacheboolEnables HTTP caching to speed up repeated runs. Default is true.budgetobjectSets path-based limits for crawled pages, e.g., {"*":1} for root page only.localestringLocale for the request, e.g., en-US.cookiesstringHTTP cookies for the request.stealthboolEnables stealth mode for Chrome requests to avoid detection. Default is true.headersobjectHTTP headers as a map of key-value pairs for all requests.metadataboolStores metadata about pages and content, aiding AI interoperability. Defaults to false.viewportobjectSets Chrome viewport dimensions. Default is 800x600.encodingstringSpecifies encoding type, e.g., UTF-8, SHIFT_JIS.subdomainsboolIncludes subdomains in the crawl. Default is false.user_agentstringCustom HTTP user agent. Defaults to a random agent.store_databoolEnables data storage for the request. Overrides storageless when set. Default is false.gpt_configobjectAllows AI to generate crawl actions, with optional chaining steps via an array for "prompt".fingerprintboolEnables advanced fingerprinting for Chrome.storagelessboolPrevents all data storage, including AI embeddings. Default is false.readabilityboolPre-processes content for reading via Mozilla‚Äôs readability. Improves content for LLMs.return_formatstringFormat to return data: markdown, raw, text, html2text. Use raw for default page format.proxy_enabledboolEnables high-performance proxies to avoid network-level blocking.query_selectorstringCSS query selector for content extraction from markup.full_resourcesboolDownloads all resources linked to the website.request_timeoutintTimeout in seconds for requests (5-60). Default is 30.run_in_backgroundboolRuns the request in the background, useful for data storage and triggering dashboard crawls. No effect if storageless is set.Was this page helpful?YesNoSelenium ScraperTXT RAG SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageSpiderToolDescriptionInstallationExampleArguments

Page: https://docs.crewai.com/tools/txtsearchtool

TXT RAG Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsTXT RAG SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsTXT RAG SearchThe TXTSearchTool is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a text file.‚ÄãTXTSearchTool
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
‚ÄãDescription
This tool is used to perform a RAG (Retrieval-Augmented Generation) search within the content of a text file.
It allows for semantic searching of a query within a specified text file‚Äôs content,
making it an invaluable resource for quickly extracting information or finding specific sections of text based on the query provided.
‚ÄãInstallation
To use the TXTSearchTool, you first need to install the crewai_tools package.
This can be done using pip, a package manager for Python.
Open your terminal or command prompt and enter the following command:
pip install 'crewai[tools]'

This command will download and install the TXTSearchTool along with any necessary dependencies.
‚ÄãExample
The following example demonstrates how to use the TXTSearchTool to search within a text file.
This example shows both the initialization of the tool with a specific text file and the subsequent search within that file‚Äôs content.
Codefrom crewai_tools import TXTSearchTool

# Initialize the tool to search within any text file's content 
# the agent learns about during its execution
tool = TXTSearchTool()

# OR

# Initialize the tool with a specific text file, 
# so the agent can search within the given text file's content
tool = TXTSearchTool(txt='path/to/text/file.txt')

‚ÄãArguments

txt (str): Optional. The path to the text file you want to search.
This argument is only required if the tool was not initialized with a specific text file;
otherwise, the search will be conducted within the initially provided text file.

‚ÄãCustom model and embeddings
By default, the tool uses OpenAI for both embeddings and summarization.
To customize the model, you can use a config dictionary as follows:
Codetool = TXTSearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # or google, openai, anthropic, llama2, ...
            config=dict(
                model="llama2",
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="google", # or openai, ollama, ...
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)
Was this page helpful?YesNoSpider ScraperVision ToolwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageTXTSearchToolDescriptionInstallationExampleArgumentsCustom model and embeddings

Page: https://docs.crewai.com/tools/visiontool

Vision Tool - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsVision ToolGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsVision ToolThe VisionTool is designed to extract text from images.‚ÄãVisionTool
‚ÄãDescription
This tool is used to extract text from images. When passed to the agent it will extract the text from the image and then use it to generate a response, report or any other output.
The URL or the PATH of the image should be passed to the Agent.
‚ÄãInstallation
Install the crewai_tools package
pip install 'crewai[tools]'

‚ÄãUsage
In order to use the VisionTool, the OpenAI API key should be set in the environment variable OPENAI_API_KEY.
Codefrom crewai_tools import VisionTool

vision_tool = VisionTool()

@agent
def researcher(self) -> Agent:
    '''
    This agent uses the VisionTool to extract text from images.
    '''
    return Agent(
        config=self.agents_config["researcher"],
        allow_delegation=False,
        tools=[vision_tool]
    )

‚ÄãArguments
The VisionTool requires the following arguments:
ArgumentTypeDescriptionimage_path_urlstringMandatory. The path to the image file from which text needs to be extracted.Was this page helpful?YesNoTXT RAG SearchWebsite RAG SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageVisionToolDescriptionInstallationUsageArguments

Page: https://docs.crewai.com/tools/websitesearchtool

Website RAG Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsWebsite RAG SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsWebsite RAG SearchThe WebsiteSearchTool is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a website.‚ÄãWebsiteSearchTool
The WebsiteSearchTool is currently in an experimental phase. We are actively working on incorporating this tool into our suite of offerings and will update the documentation accordingly.
‚ÄãDescription
The WebsiteSearchTool is designed as a concept for conducting semantic searches within the content of websites.
It aims to leverage advanced machine learning models like Retrieval-Augmented Generation (RAG) to navigate and extract information from specified URLs efficiently.
This tool intends to offer flexibility, allowing users to perform searches across any website or focus on specific websites of interest.
Please note, the current implementation details of the WebsiteSearchTool are under development, and its functionalities as described may not yet be accessible.
‚ÄãInstallation
To prepare your environment for when the WebsiteSearchTool becomes available, you can install the foundational package with:
pip install 'crewai[tools]'

This command installs the necessary dependencies to ensure that once the tool is fully integrated, users can start using it immediately.
‚ÄãExample Usage
Below are examples of how the WebsiteSearchTool could be utilized in different scenarios. Please note, these examples are illustrative and represent planned functionality:
Codefrom crewai_tools import WebsiteSearchTool

# Example of initiating tool that agents can use 
# to search across any discovered websites
tool = WebsiteSearchTool()

# Example of limiting the search to the content of a specific website, 
# so now agents can only search within that website
tool = WebsiteSearchTool(website='https://example.com')

‚ÄãArguments

website: An optional argument intended to specify the website URL for focused searches. This argument is designed to enhance the tool‚Äôs flexibility by allowing targeted searches when necessary.

‚ÄãCustomization Options
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
Codetool = WebsiteSearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # or google, openai, anthropic, llama2, ...
            config=dict(
                model="llama2",
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="google", # or openai, ollama, ...
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)
Was this page helpful?YesNoVision ToolXML RAG SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageWebsiteSearchToolDescriptionInstallationExample UsageArgumentsCustomization Options

Page: https://docs.crewai.com/tools/xmlsearchtool

XML RAG Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsXML RAG SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsXML RAG SearchThe XMLSearchTool is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a XML file.‚ÄãXMLSearchTool
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
‚ÄãDescription
The XMLSearchTool is a cutting-edge RAG tool engineered for conducting semantic searches within XML files.
Ideal for users needing to parse and extract information from XML content efficiently, this tool supports inputting a search query and an optional XML file path.
By specifying an XML path, users can target their search more precisely to the content of that file, thereby obtaining more relevant search outcomes.
‚ÄãInstallation
To start using the XMLSearchTool, you must first install the crewai_tools package. This can be easily done with the following command:
pip install 'crewai[tools]'

‚ÄãExample
Here are two examples demonstrating how to use the XMLSearchTool.
The first example shows searching within a specific XML file, while the second example illustrates initiating a search without predefining an XML path, providing flexibility in search scope.
Codefrom crewai_tools import XMLSearchTool

# Allow agents to search within any XML file's content 
#as it learns about their paths during execution
tool = XMLSearchTool()

# OR

# Initialize the tool with a specific XML file path 
#for exclusive search within that document
tool = XMLSearchTool(xml='path/to/your/xmlfile.xml')

‚ÄãArguments

xml: This is the path to the XML file you wish to search.
It is an optional parameter during the tool‚Äôs initialization but must be provided either at initialization or as part of the run method‚Äôs arguments to execute a search.

‚ÄãCustom model and embeddings
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
Code  tool = XMLSearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # or google, openai, anthropic, llama2, ...
            config=dict(
                model="llama2",
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="google", # or openai, ollama, ...
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)
Was this page helpful?YesNoWebsite RAG SearchYouTube Channel RAG SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageXMLSearchToolDescriptionInstallationExampleArgumentsCustom model and embeddings

Page: https://docs.crewai.com/tools/youtubechannelsearchtool

YouTube Channel RAG Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsYouTube Channel RAG SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsYouTube Channel RAG SearchThe YoutubeChannelSearchTool is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a Youtube channel.‚ÄãYoutubeChannelSearchTool
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
‚ÄãDescription
This tool is designed to perform semantic searches within a specific Youtube channel‚Äôs content.
Leveraging the RAG (Retrieval-Augmented Generation) methodology, it provides relevant search results,
making it invaluable for extracting information or finding specific content without the need to manually sift through videos.
It streamlines the search process within Youtube channels, catering to researchers, content creators, and viewers seeking specific information or topics.
‚ÄãInstallation
To utilize the YoutubeChannelSearchTool, the crewai_tools package must be installed. Execute the following command in your shell to install:
pip install 'crewai[tools]'

‚ÄãExample
To begin using the YoutubeChannelSearchTool, follow the example below.
This demonstrates initializing the tool with a specific Youtube channel handle and conducting a search within that channel‚Äôs content.
Codefrom crewai_tools import YoutubeChannelSearchTool

# Initialize the tool to search within any Youtube channel's content the agent learns about during its execution
tool = YoutubeChannelSearchTool()

# OR

# Initialize the tool with a specific Youtube channel handle to target your search
tool = YoutubeChannelSearchTool(youtube_channel_handle='@exampleChannel')

‚ÄãArguments

youtube_channel_handle : A mandatory string representing the Youtube channel handle. This parameter is crucial for initializing the tool to specify the channel you want to search within. The tool is designed to only search within the content of the provided channel handle.

‚ÄãCustom model and embeddings
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
Codetool = YoutubeChannelSearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # or google, openai, anthropic, llama2, ...
            config=dict(
                model="llama2",
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="google", # or openai, ollama, ...
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)
Was this page helpful?YesNoXML RAG SearchYouTube Video RAG SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageYoutubeChannelSearchToolDescriptionInstallationExampleArgumentsCustom model and embeddings

Page: https://docs.crewai.com/tools/youtubevideosearchtool

YouTube Video RAG Search - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationToolsYouTube Video RAG SearchGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryToolsYouTube Video RAG SearchThe YoutubeVideoSearchTool is designed to perform a RAG (Retrieval-Augmented Generation) search within the content of a Youtube video.‚ÄãYoutubeVideoSearchTool
We are still working on improving tools, so there might be unexpected behavior or changes in the future.
‚ÄãDescription
This tool is part of the crewai_tools package and is designed to perform semantic searches within Youtube video content, utilizing Retrieval-Augmented Generation (RAG) techniques.
It is one of several ‚ÄúSearch‚Äù tools in the package that leverage RAG for different sources.
The YoutubeVideoSearchTool allows for flexibility in searches; users can search across any Youtube video content without specifying a video URL,
or they can target their search to a specific Youtube video by providing its URL.
‚ÄãInstallation
To utilize the YoutubeVideoSearchTool, you must first install the crewai_tools package.
This package contains the YoutubeVideoSearchTool among other utilities designed to enhance your data analysis and processing tasks.
Install the package by executing the following command in your terminal:
pip install 'crewai[tools]'

‚ÄãExample
To integrate the YoutubeVideoSearchTool into your Python projects, follow the example below.
This demonstrates how to use the tool both for general Youtube content searches and for targeted searches within a specific video‚Äôs content.
Codefrom crewai_tools import YoutubeVideoSearchTool

# General search across Youtube content without specifying a video URL, 
# so the agent can search within any Youtube video content 
# it learns about its url during its operation
tool = YoutubeVideoSearchTool()

# Targeted search within a specific Youtube video's content
tool = YoutubeVideoSearchTool(
    youtube_video_url='https://youtube.com/watch?v=example'
)

‚ÄãArguments
The YoutubeVideoSearchTool accepts the following initialization arguments:

youtube_video_url: An optional argument at initialization but required if targeting a specific Youtube video. It specifies the Youtube video URL path you want to search within.

‚ÄãCustom model and embeddings
By default, the tool uses OpenAI for both embeddings and summarization. To customize the model, you can use a config dictionary as follows:
Code  tool = YoutubeVideoSearchTool(
    config=dict(
        llm=dict(
            provider="ollama", # or google, openai, anthropic, llama2, ...
            config=dict(
                model="llama2",
                # temperature=0.5,
                # top_p=1,
                # stream=true,
            ),
        ),
        embedder=dict(
            provider="google", # or openai, ollama, ...
            config=dict(
                model="models/embedding-001",
                task_type="retrieval_document",
                # title="Embeddings",
            ),
        ),
    )
)
Was this page helpful?YesNoYouTube Channel RAG SearchTelemetrywebsitexgithublinkedinyoutubePowered by MintlifyOn this pageYoutubeVideoSearchToolDescriptionInstallationExampleArgumentsCustom model and embeddings

Page: https://docs.crewai.com/telemetry

Telemetry - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationTelemetryTelemetryGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryTelemetryTelemetryUnderstanding the telemetry data collected by CrewAI and how it contributes to the enhancement of the library.‚ÄãTelemetry
By default, we collect no data that would be considered personal information under GDPR and other privacy regulations.
We do collect Tool‚Äôs names and Agent‚Äôs roles, so be advised not to include any personal information in the tool‚Äôs names or the Agent‚Äôs roles.
Because no personal information is collected, it‚Äôs not necessary to worry about data residency.
When share_crew is enabled, additional data is collected which may contain personal information if included by the user.
Users should exercise caution when enabling this feature to ensure compliance with privacy regulations.
CrewAI utilizes anonymous telemetry to gather usage statistics with the primary goal of enhancing the library.
Our focus is on improving and developing the features, integrations, and tools most utilized by our users.
It‚Äôs pivotal to understand that by default, NO personal data is collected concerning prompts, task descriptions, agents‚Äô backstories or goals,
usage of tools, API calls, responses, any data processed by the agents, or secrets and environment variables.
When the share_crew feature is enabled, detailed data including task descriptions, agents‚Äô backstories or goals, and other specific attributes are collected
to provide deeper insights. This expanded data collection may include personal information if users have incorporated it into their crews or tasks.
Users should carefully consider the content of their crews and tasks before enabling share_crew.
Users can disable telemetry by setting the environment variable OTEL_SDK_DISABLED to true.
‚ÄãData Explanation:
DefaultedDataReason and SpecificsYesCrewAI and Python VersionTracks software versions. Example: CrewAI v1.2.3, Python 3.8.10. No personal data.YesCrew MetadataIncludes: randomly generated key and ID, process type (e.g., ‚Äòsequential‚Äô, ‚Äòparallel‚Äô), boolean flag for memory usage (true/false), count of tasks, count of agents. All non-personal.YesAgent DataIncludes: randomly generated key and ID, role name (should not include personal info), boolean settings (verbose, delegation enabled, code execution allowed), max iterations, max RPM, max retry limit, LLM info (see LLM Attributes), list of tool names (should not include personal info). No personal data.YesTask MetadataIncludes: randomly generated key and ID, boolean execution settings (async_execution, human_input), associated agent‚Äôs role and key, list of tool names. All non-personal.YesTool Usage StatisticsIncludes: tool name (should not include personal info), number of usage attempts (integer), LLM attributes used. No personal data.YesTest Execution DataIncludes: crew‚Äôs randomly generated key and ID, number of iterations, model name used, quality score (float), execution time (in seconds). All non-personal.YesTask Lifecycle DataIncludes: creation and execution start/end times, crew and task identifiers. Stored as spans with timestamps. No personal data.YesLLM AttributesIncludes: name, model_name, model, top_k, temperature, and class name of the LLM. All technical, non-personal data.YesCrew Deployment attempt using crewAI CLIIncludes: The fact a deploy is being made and crew id, and if it‚Äôs trying to pull logs, no other data.NoAgent‚Äôs Expanded DataIncludes: goal description, backstory text, i18n prompt file identifier. Users should ensure no personal info is included in text fields.NoDetailed Task InformationIncludes: task description, expected output description, context references. Users should ensure no personal info is included in these fields.NoEnvironment InformationIncludes: platform, release, system, version, and CPU count. Example: ‚ÄòWindows 10‚Äô, ‚Äòx86_64‚Äô. No personal data.NoCrew and Task Inputs and OutputsIncludes: input parameters and output results as non-identifiable data. Users should ensure no personal info is included.NoComprehensive Crew Execution DataIncludes: detailed logs of crew operations, all agents and tasks data, final output. All non-personal and technical in nature.
‚ÄúNo‚Äù in the ‚ÄúDefaulted‚Äù column indicates that this data is only collected when share_crew is set to true.
‚ÄãOpt-In Further Telemetry Sharing
Users can choose to share their complete telemetry data by enabling the share_crew attribute to True in their crew configurations.
Enabling share_crew results in the collection of detailed crew and task execution data, including goal, backstory, context, and output of tasks.
This enables a deeper insight into usage patterns.
If you enable share_crew, the collected data may include personal information if it has been incorporated into crew configurations, task descriptions, or outputs.
Users should carefully review their data and ensure compliance with GDPR and other applicable privacy regulations before enabling this feature.Was this page helpful?YesNoYouTube Video RAG SearchwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageTelemetryData Explanation:Opt-In Further Telemetry Sharing

Page: https://docs.crewai.com/installation

Installation - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationGet StartedInstallationGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryGet StartedInstallationThis guide will walk you through the installation process for CrewAI and its dependencies.
CrewAI is a flexible and powerful AI framework that enables you to create and manage AI agents, tools, and tasks efficiently.
Let‚Äôs get started! üöÄ
Make sure you have Python >=3.10 <=3.13 installed on your system before you proceed.
1Install CrewAIInstall the main CrewAI package with the following command:You can also install the main CrewAI package and the tools package that include a series of helpful tools for your agents:Alternatively, you can also use:2Upgrade CrewAITo upgrade CrewAI and CrewAI Tools to the latest version, run the following command

If you‚Äôre using an older version of CrewAI, you may receive a warning about using Poetry for dependency management.



In this case, you‚Äôll need to run the command below to update your project.
This command will migrate your project to use UV and update the necessary files.
Terminalcrewai update



After running the command above, you should see the following output:



You‚Äôre all set! You can now proceed to the next step! üéâ

3Verify the installationTo verify that crewai and crewai-tools are installed correctly, run the following commandYou should see the version number of crewai and crewai-tools.If you see the version number, then the installation was successful! üéâ
‚ÄãCreate a new CrewAI project
The next step is to create a new CrewAI project.
We recommend using the YAML Template scaffolding to get started as it provides a structured approach to defining agents and tasks.
1Create a new CrewAI project using the YAML Template ConfigurationTo create a new CrewAI project, run the following CLI (Command Line Interface) command:This command creates a new project folder with the following structure:File/DirectoryDescriptionmy_project/Root directory of the project‚îú‚îÄ‚îÄ .gitignoreSpecifies files and directories to ignore in Git‚îú‚îÄ‚îÄ pyproject.tomlProject configuration and dependencies‚îú‚îÄ‚îÄ README.mdProject documentation‚îú‚îÄ‚îÄ .envEnvironment variables‚îî‚îÄ‚îÄ src/Source code directory¬†¬†¬†¬†‚îî‚îÄ‚îÄ my_project/Main application package¬†¬†¬†¬†¬†¬†¬†¬†‚îú‚îÄ‚îÄ __init__.pyMarks the directory as a Python package¬†¬†¬†¬†¬†¬†¬†¬†‚îú‚îÄ‚îÄ main.pyMain application script¬†¬†¬†¬†¬†¬†¬†¬†‚îú‚îÄ‚îÄ crew.pyCrew-related functionalities¬†¬†¬†¬†¬†¬†¬†¬†‚îú‚îÄ‚îÄ tools/Custom tools directory¬†¬†¬†¬†¬†¬†¬†¬†‚îÇ   ‚îú‚îÄ‚îÄ custom_tool.pyCustom tool implementation¬†¬†¬†¬†¬†¬†¬†¬†‚îÇ   ‚îî‚îÄ‚îÄ __init__.pyMarks tools directory as a package¬†¬†¬†¬†¬†¬†¬†¬†‚îî‚îÄ‚îÄ config/Configuration files directory¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†‚îú‚îÄ‚îÄ agents.yamlAgent configurations¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†‚îî‚îÄ‚îÄ tasks.yamlTask configurationsYou can now start developing your crew by editing the files in the src/my_project folder.
The main.py file is the entry point of the project, the crew.py file is where you define your crew, the agents.yaml file is where you define your agents,
and the tasks.yaml file is where you define your tasks.2Customize your projectTo customize your project, you can:
Modify src/my_project/config/agents.yaml to define your agents.
Modify src/my_project/config/tasks.yaml to define your tasks.
Modify src/my_project/crew.py to add your own logic, tools, and specific arguments.
Modify src/my_project/main.py to add custom inputs for your agents and tasks.
Add your environment variables into the .env file.

‚ÄãNext steps
Now that you have installed crewai and crewai-tools, you‚Äôre ready to spin up your first crew!

üë®‚Äçüíª Build your first agent with CrewAI by following the Quickstart guide.
üí¨ Join the Community to get help and share your feedback.
Was this page helpful?YesNoIntroductionQuickstartwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageCreate a new CrewAI projectNext steps

Page: https://docs.crewai.com/installation

Installation - CrewAICrewAI home pageSearch CrewAI docscrewAIInc/crewAIcrewAIInc/crewAISearchNavigationGet StartedInstallationGet StartedExamplesCrewAI home pageCommunityChangelogGet StartedIntroductionInstallationQuickstartCore ConceptsAgentsTasksCrewsFlowsLLMsProcessesCollaborationTrainingMemoryPlanningTestingCLIToolsUsing LangChain ToolsUsing LlamaIndex ToolsHow to GuidesCreate Custom ToolsSequential ProcessesHierarchical ProcessCreate Your Own Manager AgentConnect to any LLMCustomize AgentsCoding AgentsForce Tool Output as ResultHuman Input on ExecutionKickoff Crew AsynchronouslyKickoff Crew for EachReplay Tasks from Latest Crew KickoffConditional TasksAgent Monitoring with AgentOpsAgent Monitoring with LangtraceToolsBrowserbase Web LoaderCode Docs RAG SearchCode InterpreterComposio ToolCSV RAG SearchDALL-E ToolDirectory RAG SearchDirectory ReadDOCX RAG SearchEXA Search Web LoaderFile ReadFile WriteFirecrawl Crawl WebsiteFirecrawl Scrape WebsiteFirecrawl SearchGithub SearchGoogle Serper SearchJSON RAG SearchMDX RAG SearchMySQL RAG SearchNL2SQL ToolPDF RAG SearchPG RAG SearchScrape WebsiteSelenium ScraperSpider ScraperTXT RAG SearchVision ToolWebsite RAG SearchXML RAG SearchYouTube Channel RAG SearchYouTube Video RAG SearchTelemetryTelemetryGet StartedInstallationThis guide will walk you through the installation process for CrewAI and its dependencies.
CrewAI is a flexible and powerful AI framework that enables you to create and manage AI agents, tools, and tasks efficiently.
Let‚Äôs get started! üöÄ
Make sure you have Python >=3.10 <=3.13 installed on your system before you proceed.
1Install CrewAIInstall the main CrewAI package with the following command:You can also install the main CrewAI package and the tools package that include a series of helpful tools for your agents:Alternatively, you can also use:2Upgrade CrewAITo upgrade CrewAI and CrewAI Tools to the latest version, run the following command

If you‚Äôre using an older version of CrewAI, you may receive a warning about using Poetry for dependency management.



In this case, you‚Äôll need to run the command below to update your project.
This command will migrate your project to use UV and update the necessary files.
Terminalcrewai update



After running the command above, you should see the following output:



You‚Äôre all set! You can now proceed to the next step! üéâ

3Verify the installationTo verify that crewai and crewai-tools are installed correctly, run the following commandYou should see the version number of crewai and crewai-tools.If you see the version number, then the installation was successful! üéâ
‚ÄãCreate a new CrewAI project
The next step is to create a new CrewAI project.
We recommend using the YAML Template scaffolding to get started as it provides a structured approach to defining agents and tasks.
1Create a new CrewAI project using the YAML Template ConfigurationTo create a new CrewAI project, run the following CLI (Command Line Interface) command:This command creates a new project folder with the following structure:File/DirectoryDescriptionmy_project/Root directory of the project‚îú‚îÄ‚îÄ .gitignoreSpecifies files and directories to ignore in Git‚îú‚îÄ‚îÄ pyproject.tomlProject configuration and dependencies‚îú‚îÄ‚îÄ README.mdProject documentation‚îú‚îÄ‚îÄ .envEnvironment variables‚îî‚îÄ‚îÄ src/Source code directory¬†¬†¬†¬†‚îî‚îÄ‚îÄ my_project/Main application package¬†¬†¬†¬†¬†¬†¬†¬†‚îú‚îÄ‚îÄ __init__.pyMarks the directory as a Python package¬†¬†¬†¬†¬†¬†¬†¬†‚îú‚îÄ‚îÄ main.pyMain application script¬†¬†¬†¬†¬†¬†¬†¬†‚îú‚îÄ‚îÄ crew.pyCrew-related functionalities¬†¬†¬†¬†¬†¬†¬†¬†‚îú‚îÄ‚îÄ tools/Custom tools directory¬†¬†¬†¬†¬†¬†¬†¬†‚îÇ   ‚îú‚îÄ‚îÄ custom_tool.pyCustom tool implementation¬†¬†¬†¬†¬†¬†¬†¬†‚îÇ   ‚îî‚îÄ‚îÄ __init__.pyMarks tools directory as a package¬†¬†¬†¬†¬†¬†¬†¬†‚îî‚îÄ‚îÄ config/Configuration files directory¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†‚îú‚îÄ‚îÄ agents.yamlAgent configurations¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†‚îî‚îÄ‚îÄ tasks.yamlTask configurationsYou can now start developing your crew by editing the files in the src/my_project folder.
The main.py file is the entry point of the project, the crew.py file is where you define your crew, the agents.yaml file is where you define your agents,
and the tasks.yaml file is where you define your tasks.2Customize your projectTo customize your project, you can:
Modify src/my_project/config/agents.yaml to define your agents.
Modify src/my_project/config/tasks.yaml to define your tasks.
Modify src/my_project/crew.py to add your own logic, tools, and specific arguments.
Modify src/my_project/main.py to add custom inputs for your agents and tasks.
Add your environment variables into the .env file.

‚ÄãNext steps
Now that you have installed crewai and crewai-tools, you‚Äôre ready to spin up your first crew!

üë®‚Äçüíª Build your first agent with CrewAI by following the Quickstart guide.
üí¨ Join the Community to get help and share your feedback.
Was this page helpful?YesNoIntroductionQuickstartwebsitexgithublinkedinyoutubePowered by MintlifyOn this pageCreate a new CrewAI projectNext steps

